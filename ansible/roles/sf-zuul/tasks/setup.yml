---
- name: Check container image version
  include_role:
    name: sf-container
    tasks_from: check_version.yaml
  loop: "{{ zuul_components }}"
  when: item.service in zuul_services

- name: Set zuul_need_restart fact
  set_fact:
    zuul_need_restart: "{{ _version is changed }}"

- name: Create container directory
  include_role:
    name: sf-container
    tasks_from: create_directory.yaml
  loop:
    - {path: "{{ zuul_conf_dir }}"}
    - {path: "{{ zuul_lib_dir }}/tenant-secrets", mode: '0700'}
    - {path: "{{ zuul_lib_dir }}/executor", mode: '0755'}
    - {path: "{{ zuul_lib_dir }}/.ssh", mode: '0700'}
    - {path: "{{ zuul_lib_dir }}/keys", mode: '0700', recurse: "yes"}
    - {path: "{{ zuul_lib_dir }}/scripts", recurse: "yes"}
    - {path: "{{ zuul_log_dir }}", recurse: "yes"}

# Copied from /etc/crypto-policies/back-ends/openssh.config
- name: Create ssh_config
  copy:
    content: |
      Host *
          Ciphers aes256-gcm@openssh.com,chacha20-poly1305@openssh.com,aes256-ctr,aes256-cbc,aes128-gcm@openssh.com,aes128-ctr,aes128-cbc
          MACs hmac-sha2-256-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha2-256,hmac-sha1,umac-128@openssh.com,hmac-sha2-512
          GSSAPIKexAlgorithms gss-curve25519-sha256-,gss-nistp256-sha256-,gss-group14-sha256-,gss-group16-sha512-,gss-gex-sha1-,gss-group14-sha1-
          KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1
          PubkeyAcceptedKeyTypes ecdsa-sha2-nistp256,ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521,ecdsa-sha2-nistp521-cert-v01@openssh.com,ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-256,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-512-cert-v01@openssh.com,ssh-rsa,ssh-rsa-cert-v01@openssh.com
          CASignatureAlgorithms ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-ed25519,rsa-sha2-256,rsa-sha2-512,ssh-rsa
    dest: "{{ zuul_lib_dir }}/.ssh/config"
    owner: "{{ owner }}"
    group: "{{ group }}"
    mode: "0400"

- name: Install ssh private and public keys
  copy:
    content: "{{ hostvars[inventory_hostname][item.key] }}"
    dest: "/var/lib/zuul/.ssh/{{ item.name }}"
    mode: "{{ item.mode }}"
    owner: "{{ owner }}"
    group: "{{ group }}"
  loop:
    - {key: "zuul_rsa", name: "id_rsa", mode: "0400"}
    - {key: "zuul_rsa_pub", name: "id_rsa.pub", mode: "0444"}
  no_log: show_hidden_logs == False

- name: Expose public keys
  copy:
    content: "{{ zuul_rsa_pub }}"
    dest: "/var/www/keys/zuul_rsa.pub"
    mode: "0444"
  delegate_to: "{{ gateway_host }}"

- name: Create /var/lib/log-classify directory
  file:
    path: /var/lib/log-classify
    state: directory
    owner: "{{ owner }}"
    mode: '0700'
  when: "'log-classify' in roles"

- block:
    - name: Install zuul-changes.py script
      template:
        src: zuul-changes.py.j2
        dest: "{{ zuul_lib_dir }}/scripts/zuul-changes.py"
        mode: '0755'

    - name: Install generate-tenant-update-secrets.py script
      copy:
        src: generate-tenant-update-secrets.py
        dest: "{{ zuul_lib_dir }}/scripts/generate-tenant-update-secrets.py"
        mode: '0755'

    - name: Install zuul-encrypt-secret.py script
      copy:
        src: /usr/share/sf-config/scripts/zuul-encrypt-secret.py
        dest: "{{ zuul_lib_dir }}/scripts/zuul-encrypt-secret.py"
        mode: '0755'
        remote_src: yes

    - name: Install zuul_worker_rsa key
      copy:
        src: /var/lib/software-factory/bootstrap-data/ssh_keys/zuul_worker_rsa
        dest: "{{ zuul_lib_dir }}/.ssh/zuul_worker_rsa"
        owner: "{{ owner }}"
        mode: '0400'

    - name: Create /bin/zuul to interact with container
      copy:
        dest: /bin/zuul
        content: |
          #!/bin/sh -e
          exec podman exec -ti zuul-scheduler zuul $*
        mode: "0550"

    - name: Install generate-zuul-client-config.py script
      copy:
        src: generate-zuul-client-config.py
        dest: "{{ zuul_lib_dir }}/scripts/generate-zuul-client-config.py"
        mode: '0755'

    - name: Create /bin/zuul-client
      copy:
        dest: /bin/zuul-client
        content: |
          #!/bin/sh -e
          exec podman run --rm --name zc_container -v /etc/zuul/:/etc/zuul/:Z -v /etc/ssl/certs:/etc/ssl/certs:Z -v /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem:/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem --env REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-bundle.crt quay.io/software-factory/zuul-client:{{ zuul_client_container_version }} --zuul-url {{ zuul_pub_url }} $*
        mode: "0550"

  when: "'zuul-scheduler' in zuul_services"

- name: Create wrapper for zuul
  copy:
    dest: /bin/zuul_wrapper
    mode: 0755
    owner: root
    content: |
      #!/bin/sh
      # A zuul command that work even when the services are down.
      exec podman run -it --rm --network host --user root \
        --volume /etc/zuul/:/etc/zuul/:Z                  \
        --volume /var/lib/zuul/:/var/lib/zuul/:Z          \
        quay.io/software-factory/zuul-scheduler-ubi:{{ zuul_container_version }} zuul $*

- block:
    - name: Ensure known_hosts file exists
      file:
        path: "{{ zuul_lib_dir }}/.ssh/known_hosts"
        owner: "{{ owner }}"
        group: "{{ group }}"
        mode: '0600'
        state: touch
      changed_when: false

    - name: Check if the zuul sources are already defined
      command: "ssh-keygen -f {{ zuul_lib_dir }}/.ssh/known_hosts -F {{ item.host_packed }}"
      loop: "{{ zuul_ssh_known_hosts }}"
      register: _zuul_known_hosts_results
      failed_when: false
      changed_when: false

    - name: Scan the missing zuul sources
      shell: >
        ssh-keyscan -T 10 -p {{ item.item.port }} {{ item.item.host }} | sort | tac >>
        {{ zuul_lib_dir }}/.ssh/known_hosts
      loop: "{{ _zuul_known_hosts_results.results }}"
      when: item.stdout == ""

    - name: Check zuul user can connect to gerrit connections
      become_user: "{{ owner }}"
      command: >
        ssh -i {{ item.sshkey | default(zuul_lib_dir + "/.ssh/id_rsa") }}
            -o UserKnownHostsFile={{ zuul_lib_dir }}/.ssh/known_hosts
            -p {{ item.port|default(29418) }}
            {{ item.username }}@{{ item.hostname }} gerrit version
      register: _zuul_connection_test
      failed_when: _zuul_connection_test.stdout.find("gerrit version") == -1
      changed_when: false
      loop: "{{ zuul_gerrit_connections }}"

    - name: Install github private key
      copy:
        content: "{{ item.app_key }}"
        dest: "{{ zuul_lib_dir }}/.ssh/github_{{ item.name }}_rsa"
        mode: '0400'
        owner: "{{ owner }}"
        group: "{{ group }}"
      loop: "{{ zuul_github_connections }}"
      when: item.app_key
      no_log: show_hidden_logs == False
  when: "'zuul-scheduler' in zuul_services or 'zuul-merger' in zuul_services or 'zuul-executor' in zuul_services"

- block:
    - include_tasks: create_logging.yml
      vars:
        _logfile: "scheduler"
  when: "'zuul-scheduler' in zuul_services"

- block:
    - include_tasks: create_logging.yml
      vars:
        _logfile: "executor"
  when: "'zuul-executor' in zuul_services"

- block:
    - include_tasks: create_logging.yml
      vars:
        _logfile: "merger"
  when: "'zuul-merger' in zuul_services"

- block:
    - include_tasks: create_logging.yml
      vars:
        _logfile: "web"
  when: "'zuul-web' in zuul_services"

- name: Install logrotate configuration
  copy:
    src: zuul.logrotate.conf
    dest: /etc/logrotate.d/zuul

- name: "Create ssl directory"
  file:
    path: "{{ zuul_conf_dir }}/ssl"
    mode: '0550'
    owner: "{{ owner }}"
    group: "{{ group }}"
    state: directory

- name: "Setup zookeeper certificates"
  copy:
    content: "{{ item.content }}"
    dest: "{{ zuul_conf_dir }}/ssl/{{ item.dest }}"
    mode: '0440'
    owner: "{{ owner }}"
    group: "{{ group }}"
  loop:
    - {content: "{{ localCA_pem }}", dest: "localCA.pem"}
    - {content: "{{ zk_client_crt }}", dest: "zookeeper.crt"}
    - {content: "{{ zk_client_key }}", dest: "zookeeper.key"}
    - {content: "{{ zk_ca_pem }}", dest: "zk-ca.pem"}
  no_log: show_hidden_logs == False

- name: "Setup configuration"
  template:
    src: zuul.conf.j2
    dest: "{{ zuul_conf_dir }}/zuul.conf"
    mode: '0440'
    owner: "{{ owner }}"
    group: "{{ group }}"
    backup: yes
  notify: Zuul need restart

- block:
    - name: Create override directory
      file:
        path: /etc/systemd/system/zuul-scheduler.service.d
        state: directory

    - name: Set wait4service if gerrit service is present
      blockinfile:
        path: /etc/systemd/system/zuul-scheduler.service.d/override.conf
        create: yes
        block: |
          [Service]
          ExecStartPre=/usr/bin/wait4service {{ gerrit_host }} 29418
      register: zuul_override

    - name: Daemon reload
      command: systemctl daemon-reload
      when: zuul_override is changed
  when:
    - "'gerrit' in roles"
    - "'zuul-scheduler' in zuul_services"

- name: Create container
  include_role:
    name: sf-container
    tasks_from: setup.yaml
  loop: "{{ zuul_components }}"
  when: item.service in zuul_services

- name: Update gerrit email address when fqdn is updated
  block:
    - name: Delete all emails in gerrit
      command: ssh gerrit 'gerrit set-account --delete-email ALL zuul'
    - name: Update email address in gerrit
      command: ssh gerrit 'gerrit set-account --add-email zuul@{{ fqdn }} zuul'
  when:
    - update_fqdn
  delegate_to: "{{ install_server_host }}"
