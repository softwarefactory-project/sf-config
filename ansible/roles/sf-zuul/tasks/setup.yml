---
# Use 0751 to let apache access {{ zuul_lib_dir }}/git
- include_tasks: "{{ sf_tasks_dir }}/create_user.yml user_name=zuul ssh_key=zuul_rsa home_dir={{ zuul_lib_dir }} home_dir_mode=0751"

- name: Install zuul shortcut
  copy:
    src: zuul.sh
    dest: /usr/bin/zuul
    mode: 0755

- name: Prepare config-check files in /opt/sf
  block:
    - name: Create /opt/sf directory
      file:
        path: /opt/sf
        state: directory

    - name: Dump current architecture for config-check test
      copy:
        dest: /opt/sf/arch.yaml
        content: '{{ {"roles": roles}| to_yaml }}'

    - name: Setup _nodepool.yaml for config-check test
      template:
        src: /usr/share/sf-config/ansible/roles/sf-nodepool/templates/_nodepool.yaml.j2
        dest: /opt/sf/defconf-nodepool.yaml

    - name: Setup zuul.conf for config-check test
      template:
        src: fake_zuul.conf.j2
        dest: /opt/sf/defconf-zuul.conf

    - name: Setup repoxplorer config.py
      copy:
        content: "db_path = 'repoxplorer/'"
        dest: /opt/sf/defconf-repoxplorer.py
  when: "'zuul-executor' in zuul_services"

- name: Symlink SCL to zuul
  file:
    src: "{{ item.src }}/zuul"
    dest: "{{ item.dest }}/zuul3"
    state: link
  with_items:
    - {src: /var/opt/rh/rh-python35/lib, dest: /var/lib}
    - {src: /var/opt/rh/rh-python35/log, dest: /var/log}
    - {src: /etc/opt/rh/rh-python35, dest: /etc}

- name: Apply selinux port labelling
  seport:
    ports: "{{ zuul_port }}"
    proto: tcp
    setype: http_port_t
    state: present
  when: "ansible_selinux.status == 'enabled' and 'zuul-scheduler' in zuul_services"

- name: Setup apache zuul-merger.conf
  template:
    src: zuul-merger.httpd.conf.j2
    dest: /etc/httpd/conf.d/zuul-merger.conf
    mode: 0444
  notify: apache reload
  when: "'zuul-merger' in zuul_services"

- block:
    - name: Pre-Create config project rsa key
      become: "yes"
      become_user: zuul
      command: |
        /opt/rh/rh-python35/root/bin/python -c 'import zuul.configloader
        import zuul.lib.encryption
        class ZuulJobs: pass
        project = ZuulJobs()
        project.name = "config"
        project.private_key_file = "{{ zuul_lib_dir }}/keys/gerrit/config.pem"
        zuul.configloader.TenantParser._generateKeys(project)
        zuul.configloader.TenantParser._loadKeys(project)
        pub = open("{{ zuul_lib_dir }}/keys/gerrit/config.pub", "w")
        pub.write(zuul.lib.encryption.serialize_rsa_public_key(project.public_key).decode("utf-8"))
        pub.close()'
      args:
        creates: "{{ zuul_lib_dir }}/keys/gerrit/config.pub"

    - name: Fetch config project pub key on install-server
      fetch:
        flat: "yes"
        src: "{{ zuul_lib_dir }}/keys/gerrit/config.pub"
        dest: "/var/lib/software-factory/certs/config.pub"
  when: "'zuul-scheduler' in zuul_services"

- block:
    - name: Ensure known_hosts file exists
      file:
        path: "{{ zuul_lib_dir }}/.ssh/known_hosts"
        owner: zuul
        group: zuul
        mode: 0600
        state: touch

    - name: Check if the zuul sources are already defined
      command: "ssh-keygen -f {{ zuul_lib_dir }}/.ssh/known_hosts -F {{ item.host_packed }}"
      with_items: "{{ zuul_ssh_known_hosts }}"
      register: _zuul_known_hosts_results
      failed_when: false
      changed_when: false

    - name: Scan the missing zuul sources
      shell: >
        ssh-keyscan -T 10 -p {{ item.item.port }} {{ item.item.host }} >>
        {{ zuul_lib_dir }}/.ssh/known_hosts
      with_items: "{{ _zuul_known_hosts_results.results }}"
      when: item.stdout == ""

    - name: Check zuul user can connect to gerrit connections
      become_user: zuul
      command: >
        ssh -i {{ zuul_lib_dir }}/.ssh/id_rsa
            -o UserKnownHostsFile={{ zuul_lib_dir }}/.ssh/known_hosts
            -p {{ item.port|default(29418) }}
            {{ item.username }}@{{ item.hostname }}
      register: _zuul_connection_test
      failed_when: _zuul_connection_test.stderr.find("Welcome to Gerrit Code Review") == -1
      changed_when: false
      with_items: "{{ zuul_gerrit_connections }}"

    - name: Install github private key
      copy:
        content: "{{ item.app_key }}"
        dest: "{{ zuul_lib_dir }}/.ssh/github_{{ item.name }}_rsa"
        mode: 0400
        owner: zuul
        group: zuul
      with_items: "{{ zuul_github_connections }}"
      when: item.app_key

    - include_tasks: create_logging.yml _logfile="scheduler"
    - include_tasks: create_logging.yml _logfile="gearman-server"
  when: "'zuul-scheduler' in zuul_services or 'zuul-merger' in zuul_services or 'zuul-executor' in zuul_services"

- block:
    - include_tasks: create_logging.yml _logfile="executor"
  when: "'zuul-executor' in zuul_services"

- block:
    - include_tasks: create_logging.yml _logfile="merger"
  when: "'zuul-merger' in zuul_services"

- block:
    - include_tasks: create_logging.yml _logfile="web"
  when: "'zuul-web' in zuul_services"

- name: "Setup sysconfig"
  template:
    src: sysconfig.j2
    dest: "{{ zuul_sysconfig }}"
  notify: restart zuul

- name: "Setup configuration"
  template:
    src: zuul.conf.j2
    dest: "{{ zuul_conf_dir }}/zuul.conf"
    mode: 0440
    group: zuul
  notify: restart zuul

- block:
    - name: "Check if scheduler is running"
      command: systemctl is-active "rh-python35-zuul-scheduler"
      register: zuul_scheduler_service_running
      failed_when: zuul_scheduler_service_running.rc not in [0, 3]

    - name: "Manually create database to avoid concurrency issue"
      command: |
        /opt/rh/rh-python35/root/bin/python -c 'import zuul.cmd
        import configparser
        app = zuul.cmd.ZuulApp()
        app.config = configparser.ConfigParser()
        app.config.read("{{ zuul_conf_dir }}/zuul.conf")
        app.configure_connections()'
      when: zuul_scheduler_service_running.rc == 3
  when: "'zuul-scheduler' in zuul_services"
