---
- name: Ensure /var/lib/software-factory/state/zuul_config exists
  file:
    path: /var/lib/software-factory/state/zuul_config
    state: touch
  changed_when: False

- name: Check local config
  command: cat /var/lib/software-factory/state/zuul_config
  changed_when: False
  register: localconfig

- name: Check upstream config
  command: git log -n 3 --oneline zuul/ resources/
  args:
    chdir: /root/config
  changed_when: False
  register: upstreamconfig

- block:
    - include_tasks: "fetch_update_configuration.yml"

    - name: Reload zuul-scheduler service
      service:
        name: zuul-scheduler
        state: reloaded
      when:
        - _conf_diff.stdout != "" or update_fqdn
  when:
    - localconfig.stdout != upstreamconfig.stdout or force_update|default(False)
    - "'zuul-scheduler' in zuul_services"

- name: Manage tenant secrets
  block:
    - name: Check if Zuul is running
      include_tasks: "{{ sf_tasks_dir }}/ensure_zuul_running.yml"

    - name: Generate tenant-update secrets
      command: |
        podman exec -ti zuul-scheduler python3
        /var/lib/zuul/scripts/generate-tenant-update-secrets.py
        {{ managesf_internal_url }} {{ tenant_name }}
      changed_when: false

    - name: Check if secrets yaml files exist
      shell: find /var/lib/zuul/tenant-secrets/ -name '*yaml'
      register: _secrets_files
      changed_when: false

    - name: Copy secrets to the gateway
      synchronize:
        src: "/var/lib/zuul/tenant-secrets/{{ item | basename }}"
        dest: "/var/www/.config/{{ item | basename }}"
        mode: pull
      delegate_to: "{{ gateway_host }}"
      loop: "{{ _secrets_files.stdout_lines }}"
      when: _secrets_files.stdout_lines
  when: "'zuul-scheduler' in zuul_services"

- name: Write config repo sha1 matching current configuration
  copy:
    content: "{{ upstreamconfig.stdout }}"
    dest: /var/lib/software-factory/state/zuul_config
  when:
    - localconfig.stdout != upstreamconfig.stdout
    - not force_update|default(False)
