---
- name: Ensure /var/lib/software-factory/state/zuul_config exists
  file:
    path: /var/lib/software-factory/state/zuul_config
    state: touch
  changed_when: False

- name: Check local config
  command: cat /var/lib/software-factory/state/zuul_config
  changed_when: False
  register: localconfig

- name: Check upstream config
  command: git log -n 3 --oneline zuul/ resources/
  args:
    chdir: /root/config
  changed_when: False
  register: upstreamconfig

- block:
    - include_tasks: "{{ sf_tasks_dir }}/fetch_update_configuration.yml"
      vars:
        service_name: zuul
        service_config_dir: "{{ zuul_conf_dir }}"
        service_config_name: main.yaml

    - name: Check if zuul-scheduler is running
      command: systemctl -q is-active zuul-scheduler
      register: _zuul_scheduler
      failed_when: _zuul_scheduler.rc not in [0, 3]
      when: "'zuul-scheduler' in zuul_services"

    - name: Reload zuul-scheduler service
      service:
        name: zuul-scheduler
        state: reloaded
      when:
        - "'zuul-scheduler' in zuul_services"
        - _zuul_scheduler.rc == 0
        - _conf_diff.stdout != "" or update_fqdn
  when:
    - localconfig.stdout != upstreamconfig.stdout or force_update|default(False)
    - "'zuul-scheduler' in zuul_services"

- block:
    - name: Generate tenant-update secrets
      command: /usr/share/sf-config/ansible/roles/sf-zuul/files/generate-tenant-update-secrets.py "{{ managesf_internal_url }}" "{{ tenant_name }}"
      register: updated_keys
      changed_when: False

    - name: Copy secrets to the gateway
      copy:
        src: "{{ item }}"
        dest: "/var/www/.config/{{ item | basename }}"
      delegate_to: "{{ gateway_host }}"
      loop: "{{ updated_keys.stdout_lines }}"
      when: updated_keys.stdout
  when: "'zuul-scheduler' in zuul_services"

- name: Start the scheduler first
  service:
    name: zuul-scheduler
    state: started
  when: "'zuul-scheduler' in zuul_services"

- name: Ensure all services are started and enabled
  service:
    name: "{{ item }}"
    state: started
    enabled: "yes"
  loop: "{{ zuul_services }}"

- name: Write config repo sha1 matching current configuration
  copy:
    content: "{{ upstreamconfig.stdout }}"
    dest: /var/lib/software-factory/state/zuul_config
  when:
    - localconfig.stdout != upstreamconfig.stdout
    - not force_update|default(False)
