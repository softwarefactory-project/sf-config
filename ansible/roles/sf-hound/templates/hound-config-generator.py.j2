#!/bin/env python
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

import argparse
import json
from six.moves import urllib

parser = argparse.ArgumentParser()
parser.add_argument("--poll-frequency", default=(12*60*60), type=int,
                    help="Refresh time in seconds")
parser.add_argument("dest")
args = parser.parse_args()
privates = set()

config = {
   "max-concurrent-indexers": 2,
   "dbpath": "/var/lib/hound/data",
   "repos": {},
}

req = urllib.request.urlopen("{{ managesf_internal_url }}/v2/resources")
data = json.loads(req.read().decode('utf-8'))

for project, attr in data.get("resources", {}).get("projects", {}).items():
    for sr in attr.get('source-repositories', []):
        repo_name = list(sr.keys())[0]
        if sr[repo_name].get('private') is True:
            privates.add(repo_name)
        if (sr[repo_name].get('hound/skip') is True or
                'hound/skip' in attr.get('options', [])):
            privates.add(repo_name)

for repo, attr in data.get("resources", {}).get("repos", {}).items():
    if repo in privates:
        continue
    config["repos"][repo] = {
        "url": "{{ gateway_url }}/r/%s.git" % repo,
        "ms-between-poll": int(args.poll_frequency * 1000),
        "vcs-config": {
            "ref": attr.get('default-branch', 'master')
        },
        "url-pattern": {
            "base-url": "{{ gateway_url }}/r/gitweb?p=%s.git;a=blob;f={path}{anchor}" % repo,
            "anchor": "#l{line}",
        }
    }

orig = open(args.dest, "r").read()
new = json.dumps(config, indent=True, sort_keys=True)

if orig != new:
    with open(args.dest, "w") as of:
        of.write(new)
    exit(4)
