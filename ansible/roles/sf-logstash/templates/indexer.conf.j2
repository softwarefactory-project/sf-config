input {
  tcp {
    host => "{{ logstash_host }}"
    port => "{{ logstash_input_port }}"
    codec => json_lines {}
    type => "zuul"
  }
}

filter {
  grok {
    match => ["message", "(?<timestamp>[-0-9]{10}\s+[0-9.:]{12})(?<ms>[0-9]{3}) (?<sep>\|)%{GREEDYDATA:message}"]
    overwrite => [ "message" ]
  }
  if [message] =~ /^\s*$/ {
      drop { }
  }
  date {
    match => ["timestamp", "yyyy-MM-dd HH:mm:ss.SSS"]
    timezone => "UTC"
  }
}

filter {
  grok {
      match => ["message", "((?<start_time>[-0-9]{10}\s+[0-9.:]{12})(?<ms>[0-9]{3}) (?<sep>\|) Job console starting)"]
  }
  grok {
      match => ["message", "((?<end_time>[-0-9]{10}\s+[0-9.:]{12})(?<ms>[0-9]{3}) (?<sep>\|) LOOP \[upload-logs : gzip console log and json output\])"]
  }
}
filter {
  if [start_time] and [end_time] {
    ruby {
        code => "require 'time'; duration = Time.parse(event['end_time']) - Time.parse(event['start_time']);"
    }
  }
}

filter {
  grok {
      match => ["message", "(([-0-9]{10}\s+[0-9.:]{12})(?<ms>[0-9]{3}) (?<sep>\|) install-server (?<sep>\|) ok: Runtime: (?<sf_runtime>[-0-9]{1}:[-0-9]{2}:[-0-9]{2}.[-0-9]{6}))"]
  }
}


filter {
  grok {
      match => ["message", "(([-0-9]{10}\s+[0-9.:]{12})(?<ms>[0-9]{3}) (?<sep>\|) primary (?<sep>\|) ok: Runtime: (?<tripleo_runtime>[-0-9]{1}:[-0-9]{2}:[-0-9]{2}.[-0-9]{6}))"]
  }
}

output {
  elasticsearch {
    hosts => ['{{ elasticsearch_host }}']
  }
}
