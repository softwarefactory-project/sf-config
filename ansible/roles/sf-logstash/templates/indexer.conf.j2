input {
  tcp {
    host => "{{ logstash_host }}"
    port => "{{ logstash_input_port }}"
    codec => json_lines {}
    type => "zuul"
  }
}


filter {

  grok {
    match => ["message", "(?<timestamp>[-0-9]{10}\s+[0-9.:]{12})(?<ms>[0-9]{3}) (?<sep>\|)%{GREEDYDATA:message}"]
    overwrite => [ "message" ]
  }

  grok {
      match => ["message", "(%{TIMESTAMP_ISO8601} \| container \| ok: Runtime: (?<container_runtime>[0-9]:[0-9]{2}:[0-9]{2}.[0-9]{6}))"]
      add_field => { "container_runtime" => "%{container_runtime}" }
      add_tag => ["container_runtime"]
  }

  grok {
      match => ["message", "(%{TIMESTAMP_ISO8601} \| primary \| ok: Runtime: (?<tripleo_runtime>[0-9]:[0-9]{2}:[0-9]{2}.[0-9]{6}))"]
      add_field => { "tripleo_runtime" => "%{tripleo_runtime}" }
      add_tag => ["tripleo_runtime"]
  }

  grok {
      match => ["message", "(%{TIMESTAMP_ISO8601} \| install-server \| ok: Runtime: (?<sf_runtime>[-0-9]{1}:[-0-9]{2}:[-0-9]{2}.[-0-9]{6}))"]
      add_field => { "sf_runtime" => "%{sf_runtime}" }
      add_tag => ["sf_runtime"]
  }

  grok {
      match => ["message", "%{TIMESTAMP_ISO8601:start_time} \| Job console starting..."]
      add_field => {"start_time" => "%{start_time}"}
  }

    mutate {
      add_field => { "start_time_new2" => "%{start_time}" }
    }


  grok {
      match => ["message", "%{TIMESTAMP_ISO8601:end_time} \| LOOP \[upload-logs : gzip console log and json output\]"]
      add_field => { "end_time" => "%{end_time}" }
  }

  if ([start_time] and [end_time]) {
    ruby {
        code => "require 'time'; duration = Time.parse(event['end_time']) - Time.parse(event['start_time'])"
    }

    mutate {
      add_field => { "duration" => "%{duration}" }
    }

    ruby {
      init => "require 'time'"
      code => "
             starttime = Time.iso8601(event.get('start_time').to_s).to_f;
             endtime   = Time.iso8601(event.get('end_time').to_s).to_f;
             event.set('time_diff', endtime - starttime);
              "
      add_tag => [ "calculated_time_difference" ]
    }


  }


  if [message] =~ /^\s*$/ {
      drop { }
  }
}
output {
  elasticsearch {
    hosts => ['{{ elasticsearch_host }}']
  }
}
