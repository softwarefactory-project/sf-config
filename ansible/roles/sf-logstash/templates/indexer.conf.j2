input {
  tcp {
    host => "{{ logstash_host }}"
    port => "{{ logstash_input_port }}"
    codec => json_lines {}
    type => "zuul"
  }
}

filter {
  grok {
    match => ["message", "(?<timestamp>[-0-9]{10}\s+[0-9.:]{12})(?<ms>[0-9]{3}) (?<sep>\|)%{GREEDYDATA:message}"]
    overwrite => [ "message" ]
  }

  grok {
      match => [ "message", "%{TIMESTAMP_ISO8601} \| %{USER} \| ok: Runtime: (?<runtime>[0-9]:[0-9]{2}:[0-9]{2}.[0-9]{6})"]
      add_field => { "runtime" => "%{runtime}" }
  }

  grok {
      match => [ "message", "%{TIMESTAMP_ISO8601:start_time} \| Job console starting..." ]
      add_field => { "start_time" => "%{start_time}" }
  }

  grok {
      match => [ "message", "%{TIMESTAMP_ISO8601:end_time} \| LOOP \[upload-logs : gzip console log and json output\]" ]
      add_field => { "end_time" => "%{end_time}" }
  }

  grok {
      match => [ "message", "%{TIMESTAMP_ISO8601} \| %{USER} \| %{DAY} [0-9]{2} %{MONTH} %{YEAR}%{SPACE}[0-9]{2}:[0-9]{2}:[0-9]{2} \+[0-9]{4} \([0-9]{1}:[0-9]{2}:[0-9]{2}.[0-9]{3}\)%{SPACE} (?<playbook_time>[0-9]{1}:[0-9]{2}:[0-9]{2}.[0-9]{3})" ]
      add_field => { "playbook_time" => "%{playbook_time}" }
  }

  if ! ("_grokparsefailure" in [tags]) {
    date {
      match => ["timestamp", "yyyy-MM-dd HH:mm:ss.SSS"]
      timezone => "UTC"
    }
    date {
      match => ["start_time", "yyyy-MM-dd HH:mm:ss.SSS"]
      timezone => "UTC"
    }
    date {
      match => ["end_time", "yyyy-MM-dd HH:mm:ss.SSS"]
      timezone => "UTC"
    }
    date {
      match => ["runtime", "H:mm:ss.SSSSSS"]
    }
    date {
      match => ["playbook_time", "H:mm:ss.SSS"]
    }

    mutate {
      remove_tag => ["_grokparsefailure"]
    }
  }

  if [message] =~ /^\s*$/ {
      drop { }
  }
}
output {
  elasticsearch {
    hosts => ['{{ elasticsearch_host }}']
  }
}
