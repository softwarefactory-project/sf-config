---
- include_tasks: "{{ sf_tasks_dir }}/create_user.yml"
  vars:
    user_name: "{{ owner }}"
    ssh_key: nodepool_rsa
    home_dir: "{{ nodepool_lib_dir }}"

- name: Get nodepool uid
  command: id -u nodepool
  register: _nodepool_id

- name: Expose nodepool uid
  set_fact:
    nodepool_uid: "{{ _nodepool_id.stdout }}"

- name: Check container image version
  include_role:
    name: sf-container
    tasks_from: check_version.yaml
  loop: "{{ nodepool_components }}"
  when: item.service in nodepool_services

- name: Set nodepool_need_restart fact
  set_fact:
    nodepool_need_restart: "{{ _version is changed }}"

- name: Create container directory
  include_role:
    name: sf-container
    tasks_from: create_directory.yaml
  loop:
    - {path: "/root/.config/openstack"}
    - {path: "{{ nodepool_cache_dir }}", mode: "0755"}
    - {path: "{{ nodepool_conf_dir }}"}
    - {path: "{{ nodepool_conf_dir }}/scripts"}
    - {path: "{{ nodepool_conf_dir }}/ssl", mode: "0550"}
    - {path: "{{ nodepool_lib_dir }}"}
    - {path: "{{ nodepool_lib_dir }}/.config/openstack", mode: "0750"}
    - {path: "{{ nodepool_lib_dir }}/.kube", mode: "0750"}
    - {path: "{{ nodepool_lib_dir }}/.ssh"}
    - {path: "{{ nodepool_log_dir }}"}
    - {path: "/var/lib/software-factory/conf", owner: "root", group: "root"}

- name: Install ssh private and public keys
  copy:
    content: "{{ hostvars[inventory_hostname][item.key] }}"
    dest: "/var/lib/nodepool/.ssh/{{ item.name }}"
    mode: "{{ item.mode }}"
    owner: "{{ owner }}"
    group: "{{ group }}"
  loop:
    - {key: "nodepool_rsa", name: "id_rsa", mode: "0400"}
    - {key: "nodepool_rsa_pub", name: "id_rsa.pub", mode: "0444"}
    - {key: "zuul_rsa_pub", name: "zuul_rsa.pub", mode: "0444"}
  no_log: show_hidden_logs == False

- name: Define .kube/config location
  set_fact:
    nodepool_kube_config: "{{ nodepool_lib_dir }}/.kube/config"

- name: Copy provided kube_file config
  copy:
    src: "{{ nodepool_kube_file }}"
    dest: "{{ nodepool_kube_config }}"
    owner: "{{ owner }}"
    group: "{{ group }}"
    mode: '0640'
  when: nodepool_kube_file[0]|default(None) == "/"

- name: Copy IBM Cloud credentials
  copy:
    src: "{{ nodepool_ibm_credentials }}"
    dest: "{{ nodepool_lib_dir }}/.ibm.env"
    owner: "nodepool"
    mode: "0400"
  when: nodepool_ibm_credentials[0]|default(None) == "/"

- name: Define .aws/config location
  set_fact:
    nodepool_aws_config: "{{ nodepool_lib_dir }}/.aws/config"

- name: Copy provided aws_file config
  copy:
    src: "{{ nodepool_aws_file }}"
    dest: "{{ nodepool_aws_config }}"
    owner: "{{ owner }}"
    group: "{{ group }}"
    mode: '0640'
  when: nodepool_aws_file[0]|default(None) == "/"

- name: Add local openshift cluster provided by sf-hypervisor-openshift
  shell: |
    TOKEN="{{ hostvars[install_server_host]['openshift_token_' + item.hostname.replace('.', '_')] }}"
    oc login {{ item.url }} \
      --insecure-skip-tls-verify={{ item.insecure_skip_tls_verify|default(False) }} \
      --token ${TOKEN}
    # rename context to match the file generated in the config repo
    oc config --config={{ nodepool_kube_config }} rename-context "$(oc config current-context)" {{ item.context }}
  become: yes
  become_user: "{{ owner }}"
  loop: "{{ nodepool_openshift_providers|default([]) }}"

- name: Add local k1s cluster provided by sf-hypervisor-k1s
  shell: |
    oc config --config={{ nodepool_kube_config }} set-credentials k1s-managed --token={{ k1s_token }}
    {% for host in inventory %}{% if 'hypervisor-k1s' in host['roles'] %}
    oc config --config={{ nodepool_kube_config }} set-cluster k1s-managed-{{ host['name']|replace('.', '-') }} --server=https://{{ host['hostname'] }}:9023 --insecure-skip-tls-verify=true
    oc config --config={{ nodepool_kube_config }} set-context /k1s-{{ host['name']|replace('.', '-') }}/managed --cluster=k1s-managed-{{ host['name']|replace('.', '-') }} --user=k1s-managed
    {# ensure current-context is set #}
    oc config --config={{ nodepool_kube_config }} current-context &> /dev/null || oc config --config={{ nodepool_kube_config }} use-context /k1s-{{ host['name'] }}/managed
    {% endif %}{% endfor %}
  become: yes
  become_user: "{{ owner }}"
  when: "'hypervisor-k1s' in roles"

- name: Genereate os-client-config
  template:
    src: clouds.yaml.j2
    dest: "{{ item }}/openstack/clouds.yaml"
    owner: "{{ owner }}"
    group: "{{ group }}"
    mode: '0640'
  loop:
    - /root/.config
    - "{{ nodepool_lib_dir }}/.config"
  when: nodepool_clouds_file[0]|default(None) != "/"

- name: Copy os-client-config if exists
  copy:
    src: "{{ nodepool_clouds_file }}"
    dest: "{{ item }}/openstack/clouds.yaml"
    owner: "{{ owner }}"
    group: "{{ group }}"
    mode: '0640'
  loop:
    - /root/.config
    - "{{ nodepool_lib_dir }}/.config"
  when: nodepool_clouds_file[0]|default(None) == "/"

- name: Setup zookeeper certificates
  copy:
    content: "{{ item.content }}"
    dest: "{{ nodepool_conf_dir }}/ssl/{{ item.dest }}"
    mode: '0440'
    owner: "{{ owner }}"
    group: "{{ group }}"
  loop:
    - {content: "{{ zk_ca_pem }}", dest: "zk-ca.pem"}
    - {content: "{{ zk_client_crt }}", dest: "zookeeper.crt"}
    - {content: "{{ zk_client_key }}", dest: "zookeeper.key"}
  no_log: show_hidden_logs == False

- name: Install nodepool secure.conf
  template:
    src: "secure.conf.j2"
    dest: "{{ nodepool_conf_dir }}/secure.conf"
    owner: "{{ owner }}"
    group: "{{ group }}"
    mode: "0440"

- name: Check if /etc/nodepool/nodepool.yaml exists
  stat:
    path: /etc/nodepool/nodepool.yaml
  register: _nodepool_config

- name: Setup minimal nodepool config (needed to build the container)
  template:
    src: nodepool.yaml.j2
    dest: "{{ nodepool_conf_dir }}/nodepool.yaml"
    owner: "{{ owner }}"
    group: "{{ group }}"
  when: _nodepool_config.stat.isreg is not defined

- name: Setup base nodepool.yaml for managesf
  template:
    src: nodepool.yaml.j2
    dest: /var/lib/software-factory/conf/nodepool.yaml
    owner: "{{ owner }}"
    group: "{{ group }}"
  when: "'nodepool-launcher' in roles"

- name: Setup nodepool builder
  block:
    - name: Create container directory
      include_role:
        name: sf-container
        tasks_from: create_directory.yaml
      loop:
        - {path: "{{ nodepool_cache_dir }}/dib_cache"}
        - {path: "{{ nodepool_cache_dir }}/dib_tmp"}
        - {path: "{{ nodepool_lib_dir }}/dib"}
        - {path: "{{ nodepool_lib_dir }}/images"}

    - name: Create www nodepool builder log directory
      file:
        path: "{{ nodepool_html_builder_dir }}"
        owner: "{{ owner }}"
        group: "apache"
        mode: "0755"
        state: directory

    - include_tasks: create_logging.yml
      vars:
        _logfile: builder

    - name: Create /bin/nodepool to interact with container
      copy:
        dest: /bin/nodepool
        content: |
          #!/bin/sh -e
          exec podman exec -ti nodepool-builder nodepool $*
        mode: "0550"
      when: nodepool_builder_host != nodepool_launcher_host

    - name: Ensure libvirt is started
      service:
        name: libvirtd
        state: started
        enabled: yes

    - name: Install dib-virt-customize script
      copy:
        src: dib-virt-customize.py
        dest: /usr/bin/dib-virt-customize
        mode: "0755"

    - name: Setup upstream dib elements
      block:
        - name: Clone or update upstream project-config
          git:
            repo: https://opendev.org/openstack-infra/project-config
            dest: /usr/share/project-config
            force: yes

        - name: Install script
          copy:
            src: manage_upstream_config_repo.yaml
            dest: /opt/manage_upstream_config_repo.yaml

        - name: Install crontab to update project-config repo
          cron:
            name: Update project-config repo
            hour: "1"
            job: "systemd-cat ansible-playbook -i 'localhost,' /opt/manage_upstream_config_repo.yaml"
      when: dib_upstream_elements
  when:
    - '"nodepool-builder" in nodepool_services'

- name: Setup nodepool launcher
  block:
    - name: Create www nodepool launcher log directory
      file:
        path: "{{ nodepool_html_launcher_dir }}"
        owner: "{{ owner }}"
        group: "apache"
        mode: "0755"
        state: directory

    - name: Create /bin/nodepool to interact with container
      copy:
        dest: /bin/nodepool
        content: |
          #!/bin/sh -e
          exec podman exec -ti nodepool-launcher nodepool $*
        mode: "0550"

    - include_tasks: create_logging.yml
      vars:
        _logfile: launcher
  when: "'nodepool-launcher' in nodepool_services"

- name: Setup authorized keys
  copy:
    content: "{{ zuul_rsa_pub }}"
    dest: "{{ nodepool_conf_dir }}/scripts/authorized_keys"

- name: Setup localCA
  copy:
    content: "{{ localCA_pem }}"
    dest: "{{ nodepool_conf_dir }}/scripts/localCA.pem"

- name: Synchronize /etc/software-factory/certs
  synchronize:
    src: /etc/software-factory/certs/
    dest: "{{ nodepool_lib_dir }}/certs/"

- name: Update httpd directories for logs
  include_tasks: update_httpd_directories.yaml

- name: Ensure httpd is started node
  service:
    name: httpd
    state: started
    enabled: "yes"

- name: Install logrotate configuration
  copy:
    src: nodepool.logrotate.conf
    dest: /etc/logrotate.d/nodepool

- name: Install logrotate configuration for www exception logs
  copy:
    src: nodepool_www.logrotate.conf
    dest: /etc/logrotate.d/nodepool_www

- name: Create container
  include_role:
    name: sf-container
    tasks_from: setup.yaml
  loop: "{{ nodepool_components }}"
  when: item.service in nodepool_services
