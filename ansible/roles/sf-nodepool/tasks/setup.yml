---
- include_tasks: "{{ sf_tasks_dir }}/check_version.yml"
- name: Set nodepool_need_restart fact
  set_fact:
    nodepool_need_restart: "{{ _version is changed }}"

- include_tasks: "{{ sf_tasks_dir }}/create_user.yml"
  vars:
    user_name: nodepool
    ssh_key: nodepool_rsa
    home_dir: "{{ nodepool_lib_dir }}"

- name: Create .ssh and .config directories
  file:
    dest: "{{ item.path }}"
    state: directory
    mode: "{{ item.mode | default(0700) }}"
    owner: nodepool
    group: nodepool
  loop:
    - {path: "/var/lib/nodepool/.ssh"}
    - {path: "/root/.config/openstack"}
    - {path: "/var/cache/nodepool/dib_tmp"}
    - {path: "/var/cache/nodepool/dib_cache"}
    - {path: "/var/lib/nodepool/.config/openstack", mode: "0750"}
    - {path: "/var/lib/nodepool/.kube", mode: "0750"}

- name: Copy the key
  copy:
    content: "{{ hostvars[inventory_hostname][item.key] }}"
    dest: "/var/lib/nodepool/.ssh/{{ item.name }}"
    mode: "{{ item.mode }}"
    owner: "nodepool"
    group: "nodepool"
  loop:
    - {key: "nodepool_rsa", name: "id_rsa", mode: "0400"}
    - {key: "nodepool_rsa_pub", name: "id_rsa.pub", mode: "0444"}
  no_log: show_hidden_logs == False

- name: Copy provided kube_file config
  copy:
    src: "{{ nodepool_kube_file }}"
    dest: "/var/lib/nodepool/.kube/config"
    owner: nodepool
    group: nodepool
    mode: 0640
  when: nodepool_kube_file[0]|default(None) == "/"

- name: Add local openshift cluster provided by sf-hypervisor-openshift
  shell: |
    TOKEN="{{ hostvars[install_server_host]['openshift_token_' + item.hostname.replace('.', '_')] }}"
    oc login {{ item.url }} \
      --insecure-skip-tls-verify={{ item.insecure_skip_tls_verify|default(False) }} \
      --token ${TOKEN}
    # rename context to match the file generated in the config repo
    oc config rename-context "$(oc config current-context)" {{ item.context }}
  become: yes
  become_user: nodepool
  loop: "{{ nodepool_openshift_providers|default([]) }}"

- name: Add local k1s cluster provided by sf-hypervisor-k1s
  shell: |
    oc config set-credentials k1s-managed --token={{ k1s_token }}
    {% for host in inventory %}{% if 'hypervisor-k1s' in host['roles'] %}
    oc config set-cluster k1s-managed-{{ host['name']|replace('.', '-') }} --server=https://{{ host['hostname'] }}:9023 --insecure-skip-tls-verify=true
    oc config set-context /k1s-{{ host['name']|replace('.', '-') }}/managed --cluster=k1s-managed-{{ host['name']|replace('.', '-') }} --user=k1s-managed
    {# ensure current-context is set #}
    oc config current-context &> /dev/null || oc config use-context /k1s-{{ host['name'] }}/managed
    {% endif %}{% endfor %}
  become: yes
  become_user: nodepool
  when: "'hypervisor-k1s' in roles"

- name: Install os-client-config
  template:
    src: clouds.yaml.j2
    dest: "{{ item }}/openstack/clouds.yaml"
    owner: nodepool
    group: nodepool
    mode: 0640
  loop:
    - /root/.config
    - /var/lib/nodepool/.config
  when: nodepool_clouds_file[0]|default(None) != "/"

- name: Copy os-client-config
  copy:
    src: "{{ nodepool_clouds_file }}"
    dest: "{{ item }}/openstack/clouds.yaml"
    owner: nodepool
    group: nodepool
    mode: 0640
  loop:
    - /root/.config
    - /var/lib/nodepool/.config
  when: nodepool_clouds_file[0]|default(None) == "/"

- name: Install zuul public ssh key
  copy:
    content: "{{ hostvars[inventory_hostname][item+'_pub'] }}"
    dest: "{{ nodepool_lib_dir }}/.ssh/{{ item }}.pub"
    mode: 0444
    owner: nodepool
    group: nodepool
  loop:
    - zuul_rsa

- name: "Create ssl directory"
  file:
    path: "{{ nodepool_conf_dir }}/ssl"
    mode: 0550
    group: nodepool
    state: directory

- name: "Setup zookeeper certificates"
  copy:
    content: "{{ item.content }}"
    dest: "{{ nodepool_conf_dir }}/ssl/{{ item.dest }}"
    mode: 0440
    group: nodepool
  loop:
    - {content: "{{ zk_ca_pem }}", dest: "zk-ca.pem"}
    - {content: "{{ zk_client_crt }}", dest: "zookeeper.crt"}
    - {content: "{{ zk_client_key }}", dest: "zookeeper.key"}
  no_log: show_hidden_logs == False

- name: Install config
  template:
    src: "{{ item }}.j2"
    dest: "{{ nodepool_conf_dir }}/{{ item }}"
    owner: "root"
    group: "nodepool"
    mode: "0440"
  loop:
    - secure.conf

- name: Configure statsd
  when: "'influxdb' in roles"
  block:
    - name: Set statsd environment variable
      copy:
        content: |
          STATSD_HOST={{ statsd_host | default(influxdb_host | default ('')) }}
          STATSD_PORT={{ statsd_port | default(8125) }}
        dest: /etc/sysconfig/nodepool
      register: _nodepool_env

    - name: Set nodepool_need_restart fact if environment change
      set_fact:
        nodepool_need_restart: true
      when: _nodepool_env is changed

- name: Create nodepool working directories
  file:
    path: "{{ item.path }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default(0750) }}"
    state: directory
  loop:
    - {path: "/var/lib/nodepool/images", owner: "nodepool", group: "nodepool"}
    - {path: "/var/www/html", mode: "0755"}
    - {path: "/var/cache/nodepool", mode: "0755", owner: "nodepool", group: "nodepool"}

- block:
    - name: Create nodepool-log directory served by apache
      file:
        path: "/var/www/nodepool-log"
        owner: "nodepool"
        group: "apache"
        mode: "0755"
        state: directory

    - name: Install httpd conf.d nodepool log
      copy:
        src: nodepool_log.conf
        dest: /etc/httpd/conf.d/nodepool_log.conf
      register: nodepool_log_http_conf

    - name: Reload http on the nodepool-builder node
      service:
        name: httpd
        state: reloaded
        enabled: "yes"
      when:
        - 'nodepool_log_http_conf is changed'

    - name: Ensure /var/www/html/nodepool-log link to /var/www/nodepool-log
      file:
        path: /var/www/html/nodepool-log
        src: /var/www/nodepool-log
        state: link

    - name: Install dib-virt-customize script
      copy:
        src: dib-virt-customize.py
        dest: /usr/bin/dib-virt-customize
        mode: "0755"
  when:
    - '"nodepool-builder" in nodepool_services'

- name: Setup authorized keys
  copy:
    content: "{{ zuul_rsa_pub }}"
    dest: "{{ nodepool_conf_dir }}/scripts/authorized_keys"

- name: Setup localCA
  copy:
    content: "{{ localCA_pem }}"
    dest: "{{ nodepool_conf_dir }}/scripts/localCA.pem"

- block:
    - include_tasks: create_logging.yml
      vars:
        _logfile: builder
  when: "'nodepool-builder' in nodepool_services"

- block:
    - name: Create nodepool launcher log dir
      file:
        path: "{{ nodepool_launcher_dir }}"
        owner: "nodepool"
        group: "apache"
        mode: "0755"
        state: directory

    - name: Create www nodepool dir
      file:
        path: /var/www/html/nodepool-launcher
        state: directory
        owner: "nodepool"
        group: "apache"

    - name: "Ensure nodepool-launcher link to {{ nodepool_launcher_dir }}"
      file:
        path: "/var/www/html/nodepool-launcher/logs"
        src: "{{ nodepool_launcher_dir }}"
        state: link

    - include_tasks: create_logging.yml
      vars:
        _logfile: launcher

    - name: Create nodepool-launcher index.html file
      template:
        src: nodepool-launcher-index.html.j2
        dest: /var/www/html/nodepool-launcher/index.html
        owner: nodepool
        group: nodepool
        mode: 0644

  when: "'nodepool-launcher' in nodepool_services"

- name: Ensure httpd is started node
  service:
    name: httpd
    state: started
    enabled: "yes"

- name: Install logrotate configuration
  copy:
    src: nodepool.logrotate.conf
    dest: /etc/logrotate.d/nodepool

- name: Install logrotate configuration for www exception logs
  copy:
    src: nodepool_www.logrotate.conf
    dest: /etc/logrotate.d/nodepool_www
