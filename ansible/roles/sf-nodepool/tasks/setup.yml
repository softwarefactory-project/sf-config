---
- include_tasks: "{{ sf_tasks_dir }}/check_version.yml"
- name: Set nodepool_need_restart fact
  set_fact:
    nodepool_need_restart: "{{ _version is changed }}"

- include_tasks: "{{ sf_tasks_dir }}/create_user.yml user_name=nodepool ssh_key=nodepool_rsa home_dir={{ nodepool_lib_dir }}"

- name: Install nodepool shortcut
  copy:
    src: nodepool.sh
    dest: /usr/bin/nodepool
    mode: 0755

- name: Symlink SCL to nodepool
  file:
    src: "{{ item.src }}/nodepool"
    dest: "{{ item.dest }}/nodepool"
    state: link
  loop:
    - {src: /var/opt/rh/rh-python35/lib, dest: /var/lib}
    - {src: /var/opt/rh/rh-python35/log, dest: /var/log}
    - {src: /etc/opt/rh/rh-python35, dest: /etc}

- name: Create .ssh and .config directories
  file:
    dest: "{{ item.path }}"
    state: directory
    mode: "{{ item.mode | default(0700) }}"
    owner: nodepool
    group: nodepool
  loop:
    - {path: "/var/lib/nodepool/.ssh"}
    - {path: "/root/.config/openstack"}
    - {path: "/var/cache/nodepool/dib_tmp"}
    - {path: "/var/cache/nodepool/dib_cache"}
    - {path: "/var/lib/nodepool/.config/openstack", mode: "0750"}
    - {path: "/var/lib/nodepool/.kube", mode: "0750"}

- name: Copy the key
  copy:
    content: "{{ hostvars[inventory_hostname][item.key] }}"
    dest: "/var/lib/nodepool/.ssh/{{ item.name }}"
    mode: "{{ item.mode }}"
    owner: "nodepool"
    group: "nodepool"
  loop:
    - {key: "nodepool_rsa", name: "id_rsa", mode: "0400"}
    - {key: "nodepool_rsa_pub", name: "id_rsa.pub", mode: "0444"}
  no_log: true

- name: Copy provided kube_file config
  copy:
    src: "{{ nodepool_kube_file }}"
    dest: "/var/lib/nodepool/.kube/config"
    owner: nodepool
    group: nodepool
    mode: 0640
  when: nodepool_kube_file[0]|default(None) == "/"

- name: Add local openshift cluster provided by sf-hypervisor-openshift
  shell: |
    TOKEN="{{ hostvars[install_server_host]['openshift_token_' + item.hostname.replace('.', '_')] }}"
    oc login {{ item.url }} \
      --insecure-skip-tls-verify={{ item.insecure_skip_tls_verify|default(False) }} \
      --token ${TOKEN}
    # rename context to match the file generated in the config repo
    oc config rename-context "$(oc config current-context)" {{ item.context }}
  become: yes
  become_user: nodepool
  loop: "{{ nodepool_openshift_providers|default([]) }}"

- name: Install os-client-config
  template:
    src: clouds.yaml.j2
    dest: "{{ item }}/openstack/clouds.yaml"
    owner: nodepool
    group: nodepool
    mode: 0640
  loop:
    - /root/.config
    - /var/lib/nodepool/.config
  when: nodepool_clouds_file[0]|default(None) != "/"

- name: Copy os-client-config
  copy:
    src: "{{ nodepool_clouds_file }}"
    dest: "{{ item }}/openstack/clouds.yaml"
    owner: nodepool
    group: nodepool
    mode: 0640
  loop:
    - /root/.config
    - /var/lib/nodepool/.config
  when: nodepool_clouds_file[0]|default(None) == "/"

- name: add nodepool to sudoers
  copy:
    src: /etc/opt/rh/rh-python35/sudoers.d/nodepool
    dest: /etc/sudoers.d/nodepool
    owner: root
    group: root
    mode: 0640
    remote_src: yes
  when:
    - '"nodepool-builder" in nodepool_services'

- name: Install zuul public ssh key
  copy:
    content: "{{ hostvars[inventory_hostname][item+'_pub'] }}"
    dest: "{{ nodepool_lib_dir }}/.ssh/{{ item }}.pub"
    mode: 0444
    owner: nodepool
    group: nodepool
  loop:
    - zuul_rsa

- name: Install config
  template:
    src: "{{ item }}.j2"
    dest: "{{ nodepool_conf_dir }}/{{ item }}"
    owner: "root"
    group: "nodepool"
    mode: "0440"
  loop:
    - secure.conf

- name: Configure statsd
  when: "'influxdb' in roles"
  block:
    - name: Set statsd environment variable
      copy:
        content: |
          STATSD_HOST={{ influxdb_host }}
        dest: /etc/sysconfig/nodepool
      register: _nodepool_env

    - name: Set nodepool_need_restart fact if environment change
      set_fact:
        nodepool_need_restart: true
      when: _nodepool_env is changed

- name: Create nodepool working directories
  file:
    path: "{{ item.path }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default(0750) }}"
    state: directory
  loop:
    - {path: "/var/lib/nodepool/images", owner: "nodepool", group: "nodepool"}
    - {path: "/var/www/html", mode: "0755"}
    - {path: "/var/cache/nodepool", mode: "0755", owner: "nodepool", group: "nodepool"}

- block:
    - name: Create nodepool-log directory served by apache
      file:
        path: "/var/www/nodepool-log"
        owner: "nodepool"
        group: "apache"
        mode: "0755"
        state: directory

    - name: Install httpd conf.d nodepool log
      copy:
        src: nodepool_log.conf
        dest: /etc/httpd/conf.d/nodepool_log.conf
      register: nodepool_log_http_conf

    - name: Reload http on the nodepool-builder node
      service:
        name: httpd
        state: reloaded
        enabled: "yes"
      when:
        - 'nodepool_log_http_conf is changed'

    - name: Ensure /var/www/html/nodepool-log link to /var/www/nodepool-log
      file:
        path: /var/www/html/nodepool-log
        src: /var/www/nodepool-log
        state: link
  when:
    - '"nodepool-builder" in nodepool_services'

- name: Setup authorized keys
  copy:
    content: "{{ zuul_rsa_pub }}"
    dest: "{{ nodepool_conf_dir }}/scripts/authorized_keys"

- name: Setup localCA
  copy:
    content: "{{ localCA_pem }}"
    dest: "{{ nodepool_conf_dir }}/scripts/localCA.pem"

- block:
    - include_tasks: create_logging.yml _logfile="builder"
  when: "'nodepool-builder' in nodepool_services"

- block:
    - include_tasks: create_logging.yml _logfile="launcher"
  when: "'nodepool-launcher' in nodepool_services"

- name: Install logrotate configuration
  copy:
    src: nodepool.logrotate.conf
    dest: /etc/logrotate.d/nodepool
