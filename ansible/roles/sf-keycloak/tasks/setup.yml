---
# Use real shell for replication tests. TODO: improve replication test and set /sbin/nologin shell
# TODO: check if keycloak user is needed
# - name: Create keycloak user
#   include_tasks: "{{ sf_tasks_dir }}/create_user.yml user_name=keycloak ssh_key=keycloak_service_rsa shell=/bin/bash home_dir_mode=0755"

# TODO:
# - check how to use ansible xml module
# - configure gerrit with keycloak

- name: "Setup keycloak vhost certificates"
  when: not network['use_letsencrypt']
  notify: apache reload
  copy:
    content: "{{ item.content }}\n"
    dest: "/etc/pki/tls/{{ item.path }}"
    mode: "{{ item.mode|default(0444) }}"
    setype: cert_t
    seuser: system_u
    serole: object_r
  loop:
    - {content: "{{keycloak_crt}}", path: "certs/keycloak.{{ fqdn }}.crt"}
    - {content: "{{keycloak_chain}}", path: "certs/keycloak.{{ fqdn }}-chain.crt"}
    - {content: "{{keycloak_key}}", path: "private/keycloak.{{ fqdn }}.key", mode: '0400'}
  no_log: true

- name: Install configuration files
  template:
    src: "{{ item.name }}.j2"
    dest: "{{ item.path }}/{{ item.name }}"
    owner: "{{ item.user | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode }}"
    backup: yes
  loop:
    - {name: standalone.xml,
       path: /opt/jboss/keycloak/standalone/configuration/,
       mode: '0440',
       user: keycloak,
       group: keycloak}
    - {name: keycloak-vhost.conf,
       path: /etc/httpd/conf.d/,
       mode: '0440'}
  notify:
    - restart keycloak
    - apache reload

- name: Install custom themes
  copy:
    src: files/themes/sf
    dest: /opt/jboss/keycloak/themes
    owner: keycloak
    group: keycloak
    mode: '0644'

- name: Check if admin user is already created
  stat:
    path: /opt/jboss/keycloak/standalone/configuration/keycloak-add-user.json
  register: _keycloak_user_file

- name: Create master admin user
  shell: /opt/jboss/keycloak/bin/add-user-keycloak.sh -r master -u admin -p {{ authentication.admin_password }}
  when: not _keycloak_user_file.stat.exists
  no_log: true

- name: Start service
  service:
    name: keycloak
    state: started
    enabled: "yes"

# TODO hide commands, password is in the clear

- name: check for default realm
  shell: /opt/jboss/keycloak/bin/kcadm.sh get realms/{{ keycloak_default_realm }} --no-config --server http://127.0.0.1:{{ keycloak_port }}/auth --realm master --user admin --password {{ authentication.admin_password }}
  register: _default_realm
  # account for time needed to start the service
  retry: 50
  delay: 3
  until: _default_realm.rc == 0 or _default_realm.stdout.find("not found") != -1
  ignore_errors: true
  no_log: true

- name: Create default realm
  shell: /opt/jboss/keycloak/bin/kcadm.sh create realms -s realm={{ keycloak_default_realm }} -s enabled=true --no-config --server http://127.0.0.1:{{ keycloak_port }}/auth --realm master --user admin --password {{ authentication.admin_password }}
  when: _default_realm.rc != 0
  no_log: true

- name: Create default realm admin
  include_tasks: create_or_update_user.yml
  with_items:
    - {username: admin, password: {{ authentication.admin_password }}, firstName: Admin, lastName: "Software Factory"}

# TODO: these could be sfconfig options
- name: Allow user registration, password reset
  shell: /opt/jboss/keycloak/bin/kcadm.sh update realms/{{ keycloak_default_realm }} -s "registrationAllowed=true" -s "resetPasswordAllowed=true" --no-config --server http://127.0.0.1:{{ keycloak_port }}/auth --realm master --user admin --password {{ authentication.admin_password }}
  no_log: true

- name: Apply custom themes to default realm
  shell: /opt/jboss/keycloak/bin/kcadm.sh update realms/{{ keycloak_default_realm }} -s "loginTheme=sf" -s "accountTheme=sf" --no-config --server http://127.0.0.1:{{ keycloak_port }}/auth --realm master --user admin --password {{ authentication.admin_password }}
  no_log: true

- name: Configure SMTP service
  shell: /opt/jboss/keycloak/bin/kcadm.sh update realms/{{ keycloak_default_realm }} -s "smtpServer.host=127.0.0.1" -s "smtpServer.port=25" -s "smtpServer.from=keycloak@{{ fqdn }}" -s "smtpServer.replyTo=admin@{{ fqdn }}" -s 'smtpServer.fromDisplayName="Software Factory IAM"' --no-config --server http://127.0.0.1:{{ keycloak_port }}/auth --realm master --user admin --password {{ authentication.admin_password }}
  no_log: true

# Identity Providers

- name: Create GitHub identity provider
  shell: /opt/jboss/keycloak/bin/kcadm.sh create identity-provider/instances -r {{ keycloak_default_realm }} -s alias=github -s providerId=github -s enabled=true  -s 'config.useJwksUrl="true"' -s config.clientId={{ authentication.oauth2.github.client_id }} -s config.clientSecret={{ authentication.oauth2.github.client_secret }}  --no-config --server http://127.0.0.1:{{ keycloak_port }}/auth --realm master --user admin --password {{ authentication.admin_password }}
  when: not authentication.oauth2.github.disabled
  # Fail if error not due to idp already existing
  register: _gh_idp
  failed_when: _gh_idp.rc != 0 and _gh_idp.stderr.find("Identity Provider github already exists") == -1
  no_log: true

# components OIDC clients

- name: Create or update OIDC clients
  include_tasks: configure_clients.yml
  loop:
    - {component: managesf, notify: "apache reload", use_secret: True}
    - {component: gerrit, notify: "gerrit reload", use_secret: True}
    - {component: zuul, notify: "apache reload", use_secret: True}
    - {component: gateway, notify: "apache reload", use_secret: False}
  when: item in roles
