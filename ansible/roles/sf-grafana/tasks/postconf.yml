---
- name: Wait for db initialization
  wait_for:
    port: 3000
    host: '{{ grafana_host }}'

- name: Get datasources
  uri:
    url: '{{ grafana_internal_datasource_url }}'
    method: GET
    user: admin
    password: '{{ grafana_admin_password }}'
    force_basic_auth: "yes"
  register: datasources

- name: set datasource fact
  set_fact:
    grafana_datasources: "{{ datasources.json | default([]) | map(attribute='name') | list }}"

- name: Configure datasource
  uri:
    url: '{{ grafana_internal_datasource_url }}'
    method: POST
    user: admin
    password: '{{ grafana_admin_password }}'
    body: '{{ grafana_data_source | to_json }}'
    body_format: json
    force_basic_auth: "yes"
  when: grafana_data_source.name not in grafana_datasources

- name: Create grafyaml config directory
  file:
    path: /etc/grafyaml
    state: directory

- name: Get all api keys
  uri:
    url: '{{ grafana_internal_apikey_url }}'
    method: GET
    user: admin
    password: '{{ grafana_admin_password }}'
    force_basic_auth: "yes"
  register: apikeys

- name: Create a list with all api key names
  set_fact:
    apikeys_names: "{{ apikeys.json | map(attribute='name') | list }}"
  when: apikeys.json is defined

- name: Create api key and configuration file for grafyaml
  block:
    - name: Create api for grafyaml service
      uri:
        url: '{{ grafana_internal_apikey_url }}'
        method: POST
        user: admin
        password: '{{ grafana_admin_password }}'
        force_basic_auth: "yes"
        body: '{{ grafyaml_apikey_data | to_json }}'
        body_format: json
      register: apikey

    - set_fact:
        grafyaml_apikey: '{{ apikey.json.key }}'

    - name: Configure grafyaml
      template:
        src: grafyaml.conf.j2
        dest: /etc/grafyaml/grafyaml.conf
        owner: root
        group: root
        mode: 0444
  when: apikeys_names is not defined or key_name not in apikeys_names
