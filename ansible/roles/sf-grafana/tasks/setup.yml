---
- name: Check container image version
  include_role:
    name: sf-container
    tasks_from: check_version.yaml
  loop: "{{ grafana_components }}"

- name: Create container directory
  include_role:
    name: sf-container
    tasks_from: create_directory.yaml
  loop:
    - {path: "{{ grafana_config_dir }}", mode: "0755", recurse: "yes"}
    - {path: "{{ grafana_lib_dir }}", mode: "0775", recurse: "yes"}
    - {path: "{{ grafana_log_dir }}", mode: "0755", recurse: "yes"}

- name: Apply selinux port labelling
  seport:
    ports: "{{ grafana_http_port }}"
    proto: tcp
    setype: http_port_t
    state: present
  when:
    - ansible_virtualization_type not in ["podman", "systemd-nspawn"]
    - ansible_selinux.status == "enabled"

- name: Configure grafana.ini
  ini_file:
    dest: "{{ grafana_config_dir }}/grafana.ini"
    section: '{{ item.section }}'
    option: '{{ item.option }}'
    value: '{{ item.value }}'
  loop:
    - {section: server, option: http_port, value: '{{ grafana_http_port }}'}
    - {section: server, option: root_url, value: '{{ grafana_server_root_url }}'}
    - {section: database, option: type, value: '{{ grafana_database_type }}'}
    - {section: database, option: host, value: '{{ grafana_mysql_host }}:{{ grafana_mysql_port }}'}
    - {section: database, option: name, value: '{{ grafana_mysql_db }}'}
    - {section: database, option: user, value: '{{ grafana_mysql_user }}'}
    - {section: database, option: password, value: '{{ grafana_mysql_password }}'}
    - {section: users, option: allow_sign_up, value: '{{ grafana_users_allow_sign_up }}'}
    - {section: auth.anonymous, option: enabled, value: '{{ grafana_auth_anonymous_enabled }}'}
    - {section: auth.anonymous, option: org_role, value: '{{ grafana_auth_anonymous_org_role }}'}
    - {section: security, option: admin_password, value: '{{ grafana_admin_password }}'}
  register: _grafana_ini
  no_log: show_hidden_logs == False

- name: Configure authentication
  ini_file:
    dest: "{{ grafana_config_dir }}/grafana.ini"
    section: '{{ item.section }}'
    option: '{{ item.option }}'
    value: '{{ item.value }}'
  loop:
    - {section: auth.generic_oauth, option: enabled, value: 'true'}
    - {section: auth.generic_oauth, option: name, value: 'Software Factory SSO'}
    - {section: auth.generic_oauth, option: client_id, value: 'grafana'}
    - {section: auth.generic_oauth, option: client_secret, value: '{{ keycloak_grafana_client_secret }}'}
    - {section: auth.generic_oauth, option: scopes, value: 'openid;profile'}
    - {section: auth.generic_oauth, option: auth_url, value: 'https://{{ fqdn }}/auth/realms/{{ keycloak_default_realm }}/protocol/openid-connect/auth'}
    - {section: auth.generic_oauth, option: token_url, value: 'https://{{ fqdn }}/auth/realms/{{ keycloak_default_realm }}/protocol/openid-connect/token'}
    - {section: auth.generic_oauth, option: api_url, value: 'https://{{ fqdn }}/auth/realms/{{ keycloak_default_realm }}/protocol/openid-connect/userinfo'}
    - {section: auth.generic_oauth, option: tls_client_ca, value: '/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem'}
  register: _grafana_ini_auth
  no_log: show_hidden_logs == False

# See https://community.grafana.com/t/grafana-will-not-start-after-update-from-4-1-3-to-4-3-6/5212/2
# and https://github.com/puppetlabs/puppetlabs-pe_metrics_dashboard/issues/12
- name: Fix /var/run/grafana issues
  file:
    path: /var/run/grafana
    owner: grafana
    group: grafana
    mode: '0755'
    state: directory

- name: Get {{ owner }} uid
  command: id -u {{ owner }}
  register: _grafana_id

- name: Get {{ owner }} gid
  command: id -g {{ owner }}
  register: _grafana_gid

- name: Setting {{ owner }} uid var
  set_fact:
    grafana_uid: "{{ _grafana_id.stdout }}"
    grafana_gid: "{{ _grafana_gid.stdout }}"

- name: Create container
  include_role:
    name: sf-container
    tasks_from: setup.yaml
  loop: "{{ grafana_components }}"

- name: Start service
  systemd:
    name: "{{ role_package }}"
    state: started
    daemon_reload: "yes"
    enabled: "yes"

- name: Wait for grafana to be ready
  uri:
    url: "{{ grafana_internal_url }}/api/health"
    method: GET
    status_code: 200
    return_content: yes
  register: _grafana_health
  retries: 30
  delay: 5
  until:
    - _grafana_health.status == 200
    - _grafana_health.json.database == 'ok'

- name: Fix systemd file to wait for mysql
  ini_file:
    dest: /lib/systemd/system/grafana-server.service
    section: Service
    option: ExecStartPre
    value: /usr/libexec/software-factory/wait4mariadb

- name: Create scripts to manage dashboards creation and update
  block:
    - name: Create /bin/update-graphs to manage grafana dashboards
      copy:
        dest: /bin/update-graphs
        content: |
          #!/bin/bash
          set -e
          find /var/lib/software-factory/metrics -regextype posix-egrep -regex '.*.(yaml|yml)$' | xargs -I file grafana-dashboard update file
        mode: "0550"

    - name: Create /bin/grafana-dashboard to interact with container
      copy:
        dest: /bin/grafana-dashboard
        content: |
          #!/bin/sh -e
          exec podman run --network host --rm -v {{ grafyaml_metrics }}:{{ grafyaml_metrics }}:z \
          -v /etc/grafyaml/grafyaml.conf:/etc/grafyaml/grafyaml.conf:z \
          -v /bin/update-graphs:/bin/update-graphs:z \
          -v /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem:/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem \
          --env REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-bundle.crt \
          {{ grafyaml_container }} /bin/update-graphs
        mode: "0550"

    - name: Install update-grafana-graphs script
      template:
        src: update-grafana-graphs.sh.j2
        dest: /usr/bin/update-grafana-graphs.sh
        owner: root
        group: root
        mode: '0550'

    - name: Create metrics directory on the install server
      file:
        path: '{{ grafyaml_metrics }}'
        state: directory
        mode: '0755'
        owner: '{{ owner }}'
        group: '{{ group }}'
  delegate_to: '{{ install_server_host }}'

- name: Ensure service {{ role_package }} is enabled
  systemd:
    name: "{{ role_package }}"
    state: started
    daemon_reload: "yes"
    enabled: "yes"

- name: Restart {{ role_package }} container if config files changed
  systemd:
    name: "{{ role_package }}"
    state: restarted
  when:
    - _grafana_ini is changed
    - _grafana_ini_auth is changed

- include_tasks: grafana_configuration.yml
