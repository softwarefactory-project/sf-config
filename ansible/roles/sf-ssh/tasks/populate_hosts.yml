---
- name: Ensure /root/.ssh exists
  file:
    path: /root/.ssh
    owner: root
    group: root
    mode: '0700'
    state: directory

- name: Check if ssh_known_hosts exist
  stat: path=/root/.ssh/known_hosts
  register: ssh_known_hosts

- name: Create ssh known_hosts config file
  file:
    path: /root/.ssh/known_hosts
    owner: root
    group: root
    mode: '0600'
    state: touch
  when: ssh_known_hosts.stat.exists == False

- name: Create empty hosts list
  set_fact:
    _public_servers: []

- name: Build hosts list
  set_fact:
    _public_servers: >-
        {% for host in inventory %}
        {% if host.private is not defined or not host.private %}
        {{ host.hostname }}
        {% endif %}
        {% endfor %}

- name: Ensure _public_servers is a list
  set_fact:
    _public_servers: "{{ _public_servers.split() }}"

- name: Wait for ssh services on all servers
  wait_for:
    host: "{{ item }}"
    port: 22
  loop: "{{ _public_servers }}"

- name: Gathering public ssh servers keys
  shell: "ssh-keyscan {{ item }} | grep ssh-rsa"
  loop: "{{ _public_servers }}"
  register: public_ssh_host_keys
  until: public_ssh_host_keys is success
  changed_when: false

- name: Populate ssh_know_hosts
  lineinfile:
    dest: /root/.ssh/known_hosts
    line: "{{ item.stdout }}"
  loop: "{{ public_ssh_host_keys.results }}"
  no_log: show_hidden_logs == False

- name: Force hostnames
  hostname:
    name: "{{ item }}"
  delegate_to: "{{ item }}"
  when: ansible_virtualization_type not in ["podman", "systemd-nspawn"]
  loop: "{{ _public_servers }}"

- name: Gather hostnames
  command: hostnamectl --static
  loop: "{{ _public_servers }}"
  delegate_to: "{{ item }}"
  register: _hostnames
  changed_when: false

- name: Check hostnames
  fail:
    msg: >-
      Hostnames does not match arch.yaml definition,
      manually fix using hostnamectl set-hostname ....
      Then run ansible -m setup
  when: 'item.1 != _hostnames.results[item.0].stdout'
  with_indexed_items: "{{ _public_servers }}"
