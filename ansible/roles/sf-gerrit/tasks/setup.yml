---
- include_tasks: "{{ sf_tasks_dir }}/check_version.yml"

# Use real shell for replication tests. TODO: improve replication test and set /sbin/nologin shell
- name: Create gerrit user
  include_tasks: "{{ sf_tasks_dir }}/create_user.yml"
  vars:
    user_name: gerrit
    ssh_key: gerrit_service_rsa
    shell: /bin/bash
    home_dir_mode: "0755"

- name: Expose public keys
  copy:
    content: "{{ gerrit_service_rsa_pub }}"
    dest: "/var/www/keys/gerrit_service_rsa.pub"
    mode: "0444"
  delegate_to: "{{ gateway_host }}"

- name: Initialize git config
  template:
    src: gitconfig.j2
    dest: /root/.gitconfig
  delegate_to: "{{ install_server_host }}"

- name: Initialize managesf git config
  template:
    src: gitconfig.j2
    dest: /var/lib/managesf/.gitconfig
  delegate_to: "{{ managesf_host }}"

- name: Initialize gerrit git config
  template:
    src: gitconfig.j2
    dest: /var/lib/gerrit/.gitconfig

# During the first run, config repo isn't created, so use the default file
- include_vars: "{{ item }}"
  with_first_found:
    - /root/config/gerrit/commentlinks.yaml
    - /usr/share/sf-config/ansible/roles/sf-repos/files/config/gerrit/commentlinks.yaml

- name: Render topmenu links list
  set_fact:
    topmenu_links: "{{ lookup('template', '../sf-gateway/templates/topmenu_links.j2') }}"
  no_log: show_hidden_logs == False

- name: Install configuration files
  template:
    src: "{{ item.name }}.j2"
    dest: "{{ item.path }}/{{ item.name }}"
    owner: gerrit
    group: gerrit
    mode: "{{ item.mode }}"
    backup: yes
  loop:
    - {name: patchset-created,
       path: /var/lib/gerrit/hooks,
       mode: '0740'}
    - {name: change-merged,
       path: /var/lib/gerrit/hooks,
       mode: '0740'}
    - {name: gerrit.config,
       path: /etc/gerrit,
       mode: '0644'}
    - {name: secure.config,
       path: /etc/gerrit,
       mode: '0600'}
    - {name: gerrit,
       path: /etc/sysconfig,
       mode: '0444'}
    - {name: GerritSiteHeader.html,
       path: /etc/gerrit,
       mode: '0444'}
  notify: [restart gerrit]

- name: Install static configuration files for gerrit
  copy:
    src: "{{ item.name }}"
    dest: /etc/gerrit/
    mode: 0644
    owner: gerrit
    group: gerrit
  loop:
    - {name: GerritSite.css}

- name: Check for replication.config
  stat:
    path: /etc/gerrit/replication.config
  register: gerrit_replication_config

- name: Copy initial replication.config
  copy:
    src: replication.config
    dest: /etc/gerrit/
    mode: 0644
  when: not gerrit_replication_config.stat.exists

- name: Copy gerrit service key
  copy:
    content: "{{ hostvars[inventory_hostname][item.name] }}\n"
    dest: "/etc/gerrit/{{ item.file }}"
    mode: "{{ item.mode }}"
    owner: gerrit
    group: gerrit
  loop:
    - {name: gerrit_service_rsa, file: ssh_host_rsa_key, mode: "0400"}
    - {name: gerrit_service_rsa_pub, file: ssh_host_rsa_key.pub, mode: "0444"}

- name: Copy gerrit admin key
  copy:
    content: "{{ gerrit_admin_rsa }}"
    dest: "/root/.ssh/gerrit_admin"
    mode: "0400"

- name: Copy gerrit admin pub key
  copy:
    content: "{{ gerrit_admin_rsa_pub }}"
    dest: "/root/.ssh/gerrit_admin.pub"
    mode: "0444"

- name: Gerrit pub key should be updated when fqdn is updated
  block:
    - set_fact:
        gerrit_service_rsa_pub_file: '/var/lib/software-factory/bootstrap-data/ssh_keys/gerrit_service_rsa.pub'
    - set_fact:
        gerrit_service_rsa_pub: "{{ lookup('file', gerrit_service_rsa_pub_file ) }}"

    - name: Update gerrit service rsa pub
      copy:
        content: "{{ gerrit_service_rsa_pub }}\n"
        dest: /etc/gerrit/ssh_host_rsa_key.pub
        mode: 0400
  when: update_fqdn

- name: Allow gerrit to connect to himself for self replication test
  authorized_key:
    user: gerrit
    key: "{{ gerrit_service_rsa_pub }}"

- name: Apply selinux port labelling
  seport:
    ports: "{{ gerrit_port }}"
    proto: tcp
    setype: http_port_t
    state: present
  when:
    - ansible_virtualization_type != "podman"
    - ansible_selinux.status == "enabled"

- name: Test if gerrit All-Projects exists
  stat:
    path: /var/lib/gerrit/git/All-Projects.git
  register: gerrit_allprojects

- name: Test if gerrit is running
  command: systemctl -q is-active gerrit
  register: _gerrit
  failed_when: _gerrit.rc != 3 and _gerrit.rc != 0
  changed_when: false

- name: Restart service if fqdn is updated
  systemd:
    name: gerrit
    state: restarted
  when:
    - update_fqdn

- name: Update gerrit email address when fqdn is updated
  block:
    - name: Delete all emails in gerrit
      command: ssh gerrit 'gerrit set-account --delete-email ALL admin'
    - name: Update email address in gerrit
      command: ssh gerrit 'gerrit set-account --add-email admin@{{ fqdn }} admin'
  when:
    - update_fqdn

- name: Initialize/Upgrade gerrit when service is not running
  command: /usr/bin/java -jar /var/lib/gerrit/bin/gerrit.war init -d /var/lib/gerrit --batch --no-auto-start --skip-plugins
  become: true
  become_user: gerrit
  when: _gerrit.rc == 3

- name: Reindex gerrit when service is not running
  command: /usr/bin/java -jar /var/lib/gerrit/bin/gerrit.war reindex -d /var/lib/gerrit
  become: true
  become_user: gerrit
  when: _gerrit.rc == 3

- name: Initialize admin user
  command: pynotedb create-admin-user --email "admin@{{ fqdn }}" --pubkey "{{ gerrit_admin_rsa_pub }}" --all-users /var/lib/gerrit/git/All-Users.git
  become: true
  become_user: gerrit

- name: Start service
  service:
    name: gerrit
    state: started
    enabled: "yes"

- name: Create admin user password
  command: ssh gerrit gerrit set-account admin --http-password "{{ gerrit_admin_password }}"
  no_log: true

- name: Add zuul user
  command: /usr/share/sf-config/scripts/gerrit-set-ci-user.sh "zuul" "ssh-rsa {{ zuul_rsa_pub.split()[1] }}" "zuul@{{ fqdn }}"
  register: _gerrit_set_ci_user
  changed_when: _gerrit_set_ci_user.rc == 3
  failed_when: _gerrit_set_ci_user.rc != 3 and _gerrit_set_ci_user.rc != 0

- include_tasks: setup_acl.yml

- name: Setup socat service
  block:
    - name: Install service file for socat_gerrit
      copy:
        src: socat_gerrit.service
        dest: /lib/systemd/system/socat_gerrit.service
        owner: root
        group: root
        mode: 0644
      delegate_to: "{{ gateway_host }}"

    - name: Start socat_gerrit
      systemd:
        name: socat_gerrit
        enabled: "yes"
        state: started
        daemon_reload: yes
      delegate_to: "{{ gateway_host }}"
  when: groups['gerrit'] != groups['gateway']

- name: create test accounts
  command: ssh gerrit 'gerrit create-account --email {{ item.email }} --http-password {{ item.password }} {{ item.username }}'
  loop:
    - {username: "user2",
       password: "{{ authentication.admin_password }}",
       fullname: "Demo User2",
       email: "user2@{{ fqdn }}"}
    - {username: "user3",
       password: "{{ authentication.admin_password }}",
       fullname: "Demo User3",
       email: "user3@{{ fqdn }}"}
    - {username: "user4",
       password: "{{ authentication.admin_password }}",
       fullname: "Demo User4",
       email: "user4@{{ fqdn }}"}
    - {username: "user5",
       password: "{{ authentication.admin_password }}",
       fullname: "Demo User5",
       email: "user5@{{ fqdn }}"}
  register: test_user_create
  failed_when: test_user_create.rc != 0 and test_user_create.stderr.find("already exists") == -1
  when: "'sftests.com' in fqdn"
