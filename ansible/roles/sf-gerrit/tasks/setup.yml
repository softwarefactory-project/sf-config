---
- name: Get gerrit uid
  command: id -u gerrit
  register: _gerrit_id

- name: Expose gerrit uid
  set_fact:
    gerrit_uid: "{{ _gerrit_id.stdout }}"

- name: Check container image version
  include_role:
    name: sf-container
    tasks_from: check_version.yaml
  loop: "{{ gerrit_components }}"

- name: Create container directory
  include_role:
    name: sf-container
    tasks_from: create_directory.yaml
  loop:
    - {path: "{{ gerrit_conf_dir }}", recurse: "yes"}
    - {path: "{{ gerrit_lib_dir }}/cache"}
    - {path: "{{ gerrit_lib_dir }}/data"}
    - {path: "{{ gerrit_lib_dir }}/db"}
    - {path: "{{ gerrit_lib_dir }}/git", mode: "0755"}
    - {path: "{{ gerrit_lib_dir }}/index"}
    - {path: "{{ gerrit_lib_dir }}/hooks"}
    - {path: "{{ gerrit_lib_dir }}/plugins"}
    - {path: "{{ gerrit_lib_dir }}/.ssh"}
    - {path: "{{ gerrit_log_dir }}", recurse: "yes"}

- name: Remove pynotedb cache for gerrit_lib_dir mode 755 update files permissions
  file:
    path: "{{ gerrit_lib_dir }}/.cache"
    state: absent

- name: Install ssh private and public keys
  copy:
    content: "{{ hostvars[inventory_hostname][item.key] }}"
    dest: "{{ gerrit_lib_dir }}/.ssh/{{ item.name }}"
    mode: "{{ item.mode }}"
    owner: "{{ owner }}"
    group: "{{ group }}"
  loop:
    - {key: "gerrit_service_rsa", name: "id_rsa", mode: "0400"}
    - {key: "gerrit_service_rsa_pub", name: "id_rsa.pub", mode: "0444"}
  no_log: show_hidden_logs == False

- name: Ensure the germqtt is disabled
  service:
    name: germqtt
    state: stopped
    enabled: "no"
  failed_when: false

- name: Expose public keys
  copy:
    content: "{{ gerrit_service_rsa_pub }}"
    dest: "/var/www/keys/gerrit_service_rsa.pub"
    mode: "0444"
  delegate_to: "{{ gateway_host }}"

- name: Initialize git config
  template:
    src: gitconfig.j2
    dest: /root/.gitconfig
  delegate_to: "{{ install_server_host }}"

- name: Initialize managesf git config
  block:
    - name: Create working directory
      file:
        path: /var/lib/managesf
        state: directory

    - name: Install template
      template:
        src: gitconfig.j2
        dest: /var/lib/managesf/.gitconfig
  delegate_to: "{{ managesf_host }}"

- name: Initialize gerrit git config
  template:
    src: gitconfig.j2
    dest: "{{ gerrit_lib_dir }}/.gitconfig"

# During the first run, config repo isn't created, so use the default file
- include_vars: "{{ item }}"
  with_first_found:
    - /root/config/gerrit/commentlinks.yaml
    - /usr/share/sf-config/ansible/roles/sf-repos/files/config/gerrit/commentlinks.yaml

- name: Install configuration files
  template:
    src: "{{ item.name }}.j2"
    dest: "{{ item.path }}/{{ item.name }}"
    owner: "{{ owner }}"
    group: "{{ group }}"
    mode: "{{ item.mode }}"
    backup: yes
  loop:
    - {name: gerrit.config,
       path: "{{ gerrit_conf_dir }}",
       mode: '0644'}
    - {name: secure.config,
       path: "{{ gerrit_conf_dir }}",
       mode: '0600'}
    - {name: gerrit,
       path: /etc/sysconfig,
       mode: '0444'}
  notify: restart gerrit

- name: Check for replication.config
  stat:
    path: "{{ gerrit_conf_dir }}/replication.config"
  register: gerrit_replication_config

- name: Copy initial replication.config
  copy:
    src: replication.config
    dest: "{{ gerrit_conf_dir }}"
    mode: '0644'
  when: not gerrit_replication_config.stat.exists

- name: Copy gerrit service key
  copy:
    content: "{{ hostvars[inventory_hostname][item.name] }}\n"
    dest: "/etc/gerrit/{{ item.file }}"
    mode: "{{ item.mode }}"
    owner: "{{ owner }}"
    group: "{{ group }}"
  loop:
    - {name: gerrit_service_rsa, file: ssh_host_rsa_key, mode: "0400"}
    - {name: gerrit_service_rsa_pub, file: ssh_host_rsa_key.pub, mode: "0444"}
  notify: restart gerrit

- name: Copy gerrit admin key
  copy:
    content: "{{ gerrit_admin_rsa }}"
    dest: "/root/.ssh/gerrit_admin"
    mode: "0400"
  notify: restart gerrit

- name: Copy gerrit admin pub key
  copy:
    content: "{{ gerrit_admin_rsa_pub }}"
    dest: "/root/.ssh/gerrit_admin.pub"
    mode: "0444"
  notify: restart gerrit

- name: Gerrit pub key should be updated when fqdn is updated
  block:
    - set_fact:
        gerrit_service_rsa_pub_file: '/var/lib/software-factory/bootstrap-data/ssh_keys/gerrit_service_rsa.pub'
    - set_fact:
        gerrit_service_rsa_pub: "{{ lookup('file', gerrit_service_rsa_pub_file ) }}"

    - name: Update gerrit service rsa pub
      copy:
        content: "{{ gerrit_service_rsa_pub }}\n"
        dest: "{{ gerrit_conf_dir }}/ssh_host_rsa_key.pub"
        mode: '0400'
      notify: restart gerrit
  when: update_fqdn

- name: Allow gerrit to connect to himself for self replication test
  authorized_key:
    user: gerrit
    path: "{{ gerrit_lib_dir }}/.ssh/authorized_keys"
    key: "{{ gerrit_service_rsa_pub }}"

- name: Apply selinux port labelling
  seport:
    ports: "{{ gerrit_port }}"
    proto: tcp
    setype: http_port_t
    state: present
  when:
    - ansible_virtualization_type not in ["podman", "systemd-nspawn"]
    - ansible_selinux.status == "enabled"

- name: Test if gerrit All-Projects exists
  stat:
    path: "{{ gerrit_lib_dir }}/git/All-Projects.git"
  register: gerrit_allprojects

- name: Test if gerrit is running
  command: systemctl -q is-active gerrit
  register: _gerrit
  failed_when: _gerrit.rc != 3 and _gerrit.rc != 0
  changed_when: false

- name: Reindex gerrit data when service is not running
  file:
    path: /var/log/gerrit/.run_init
    state: touch
    owner: gerrit
  when: _gerrit.rc == 3

- name: Check for keystore
  stat:
    path: "{{ gerrit_conf_dir }}/keystore"
  register: gerrit_keystore_file

- name: create PKCS12 bundle for gerrit keystore if fqdn is updated or keystore does not exist
  shell: |
    cat /etc/pki/tls/certs/{{ fqdn }}.crt /etc/pki/tls/certs/ca-bundle.crt > /tmp/cert-chain.txt
    openssl pkcs12 -export -inkey /etc/pki/tls/private/{{ fqdn }}.key -in /tmp/cert-chain.txt -out {{ gerrit_conf_dir }}/{{ fqdn }}.pkcs12 -passout pass:{{ gerrit_keystore_password }}
    rm -f /tmp/cert-chain.txt
  when:
    - update_fqdn or not gerrit_keystore_file.stat.exists

- name: prepare localCA certificate for import in keystore if fqdn is updated or keystore does not exist
  shell: |
    openssl x509 -outform der -in /etc/pki/ca-trust/source/anchors/localCA.pem -out {{ gerrit_conf_dir }}/localCA.crt
  when:
    - update_fqdn or not gerrit_keystore_file.stat.exists

- name: set correct ownership of PKCS12 bundle
  file:
    path: "{{ gerrit_conf_dir }}/{{ fqdn }}.pkcs12"
    owner: "{{ owner }}"
    group: "{{ group }}"
  when:
    - update_fqdn or not gerrit_keystore_file.stat.exists

- name: Restart service if fqdn is updated
  systemd:
    name: gerrit
    state: restarted
  when:
    - update_fqdn

- name: Update gerrit email address when fqdn is updated
  block:
    - name: Delete all emails in gerrit
      command: ssh gerrit 'gerrit set-account --delete-email ALL admin'
      register: task_result
      until: task_result.rc == 0
      retries: 60
      delay: 1

    - name: Update email address in gerrit
      command: ssh gerrit 'gerrit set-account --add-email admin@{{ fqdn }} admin'
      register: task_result
      until: task_result.rc == 0
      retries: 60
      delay: 1
  when:
    - update_fqdn

- name: Install entrypoint.sh
  template:
    src: entrypoint.sh.j2
    dest: "{{ gerrit_lib_dir }}/entrypoint.sh"
    owner: "{{ owner }}"
    group: "{{ group }}"
    mode: '0755'
  notify: restart gerrit

- name: Create container
  include_role:
    name: sf-container
    tasks_from: setup.yaml
  vars:
    extra_service_config: TimeoutSec=600
  loop: "{{ gerrit_components }}"

- name: Ensure gerrit home for pynotedb
  command: usermod --home /var/lib/gerrit gerrit

- name: Start service
  service:
    name: gerrit
    state: started
    enabled: "yes"

- name: Initialize admin user
  command: pynotedb create-admin-user --email "admin@{{ fqdn }}" --pubkey "{{ gerrit_admin_rsa_pub }}" --all-users "{{ gerrit_lib_dir }}/git/All-Users.git" --scheme keycloak-oauth
  become: true
  become_user: "{{ owner }}"
  register: task_result
  until: task_result.rc == 0
  retries: 60
  delay: 1

- name: Create admin user password
  command: ssh gerrit gerrit set-account admin --http-password "{{ gerrit_admin_password }}"
  delegate_to: "{{ install_server_host }}"
  register: task_result
  until: task_result.rc == 0
  retries: 60
  delay: 1
  no_log: true

- name: Add zuul user
  command: /usr/share/sf-config/scripts/gerrit-set-ci-user.sh "zuul" "ssh-rsa {{ zuul_rsa_pub.split()[1] }}" "zuul@{{ fqdn }}"
  delegate_to: "{{ install_server_host }}"
  register: _gerrit_set_ci_user
  changed_when: _gerrit_set_ci_user.rc == 3
  failed_when: _gerrit_set_ci_user.rc != 3 and _gerrit_set_ci_user.rc != 0

- name: Create zuul user password
  command: ssh gerrit gerrit set-account zuul --http-password "{{ gerrit_zuul_password }}"
  delegate_to: "{{ install_server_host }}"
  no_log: true

- include_tasks: setup_acl.yml

- name: Ensure plugin-manager plugin is disabled
  command: ssh gerrit gerrit plugin remove plugin-manager
  become: true

- name: Setup socat service
  block:
    - name: Install service file for socat_gerrit
      copy:
        src: socat_gerrit.service
        dest: /lib/systemd/system/socat_gerrit.service
        owner: root
        group: root
        mode: '0644'
      delegate_to: "{{ gateway_host }}"

    - name: Start socat_gerrit
      systemd:
        name: socat_gerrit
        enabled: "yes"
        state: started
        daemon_reload: yes
      delegate_to: "{{ gateway_host }}"
  when: groups['gerrit'] != groups['gateway']

- name: create test accounts
  command: ssh gerrit 'gerrit create-account --email {{ item.email }} --http-password {{ item.password }} {{ item.username }}'
  loop:
    - {username: "user2",
       password: "{{ authentication.admin_password }}",
       fullname: "Demo User2",
       email: "user2@{{ fqdn }}"}
    - {username: "user3",
       password: "{{ authentication.admin_password }}",
       fullname: "Demo User3",
       email: "user3@{{ fqdn }}"}
    - {username: "user4",
       password: "{{ authentication.admin_password }}",
       fullname: "Demo User4",
       email: "user4@{{ fqdn }}"}
    - {username: "user5",
       password: "{{ authentication.admin_password }}",
       fullname: "Demo User5",
       email: "user5@{{ fqdn }}"}
  register: test_user_create
  failed_when: test_user_create.rc != 0 and test_user_create.stderr.find("already exists") == -1
  delegate_to: "{{ install_server_host }}"
  when: "'sftests.com' in fqdn"
