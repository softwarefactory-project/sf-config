---
- name: Create demo user (cauth)
  command: >
    sfmanager user create --username demo --password demo
        --email demo@{{ fqdn }} --fullname "Demo User"
  environment:
    REQUESTS_CA_BUNDLE: /etc/ssl/certs/ca-bundle.crt
  # TODO: fix sfmanager to not fail when user already exists
  ignore_errors: yes
  when:
    - "'cauth' in roles"

- name: Create demo user (keycloak)
  # TODO this exists already in sf-keycloak
  block:
    - name: create user demo if needed
      command: >
        /opt/jboss/keycloak/bin/kcadm.sh create users
            -r SF
            -s 'username=demo'
            -s 'email=demo@{{ fqdn }}'
            -s 'firstName=Demo'
            -s 'lastName=User'
            -s 'enabled=true'
            --no-config --server http://127.0.0.1:{{ keycloak_http_port }}/auth --realm master --user admin --password {{ authentication.admin_password }}
      register: _user_create
      failed_when: _user_create.rc != 0 and _user_create.stderr.find("User exists") == -1
      no_log: true
    - command: >
        /opt/jboss/keycloak/bin/kcadm.sh get users
            -r SF
            -q username=demo
            --no-config --server http://127.0.0.1:{{ keycloak_http_port }}/auth --realm master --user admin --password {{ authentication.admin_password }}
      register: _uid
      no_log: true
    - set_fact:
        uid: "{{ _uid.stdout | from_json }}"
    - name: set demo user's password
      command: >
        /opt/jboss/keycloak/bin/kcadm.sh set-password
            -r SF
            --userid {{ uid[0]['id'] }}
            --new-password demo
            --no-config --server http://127.0.0.1:{{ keycloak_http_port }}/auth --realm master --user admin --password {{ authentication.admin_password }}
      no_log: true
  delegate_to: "{{ keycloak_host }}"
  when:
    - "'keycloak' in roles"

- name: Log in to create user
  command: sfmanager --auth demo:demo sf_user list
  environment:
    REQUESTS_CA_BUNDLE: /etc/ssl/certs/ca-bundle.crt
  when:
    - "'cauth' in roles"

# with keycloak there is no callback provisioning as with cauth. With this
# task we talk directly to gerrit to pre-provision the user.
# TODO use kc's mqtt event exporter to implement the user provisioning in gerrit.
- name: pre-provision user in gerrit
  command: >
    ssh gerrit gerrit create-account demo
        --email "demo@{{ fqdn }}"
        --full-name \"Demo User\"
        --http-password demo
  when:
    - "'keycloak' in roles"

- name: Check if repository exists
  command: python3 -c "import requests; print('demo-project' in requests.get('{{ managesf_internal_url }}/v2/resources').json().get('resources', {}).get('repos', {}))"
  register: demo_resource

- block:
    - name: Copy demo resources file
      copy:
        src: "demo/config/{{ item }}"
        dest: "/root/config/{{ item }}"
      loop:
        - zuul/demo.yaml

    - name: Provision demo resources in config repo
      command: "{{ item }}"
      args:
        chdir: "/root/config"
      loop:
        - /usr/share/sf-config/scripts/create_project_resources.py --repo demo-project --repo demo-project-distgit --core demo@{{ fqdn }} resources/demo.yaml
        - /usr/bin/managesf-resources direct-apply --prev-yaml /var/lib/software-factory/bootstrap-data/empty_resources.yaml --new-yaml resources/demo.yaml
        - git add resources/demo.yaml zuul/demo.yaml
        - git commit -m 'Provision demo resources'
        - git push git+ssh://gerrit/config master
  when: demo_resource.stdout == 'False'

- stat:
    path: /root/demo-project
  register: demo_project_done

- block:
    - name: Create a temporary clone directory
      command: mktemp -d
      register: demo_tmp

    - name: Clone the demo-project repository
      git:
        repo: git+ssh://gerrit/demo-project
        dest: "{{ demo_tmp.stdout }}"

    - name: Copy demo project files
      copy:
        src: "demo/project/{{ item }}"
        dest: "{{ demo_tmp.stdout }}/{{ item }}"
      loop:
        - .zuul.yaml
        - setup.py
        - setup.cfg
        - tox.ini
        - demo.py

    - name: Push demo project repo
      command: "git {{ item }}"
      args:
        chdir: "{{ demo_tmp.stdout }}"
      loop:
        - "add -A"
        - "commit -m 'Initialize demo-project repository'"
        - "push git+ssh://gerrit/demo-project master"

    - name: Save zuul jobs repo
      command: "mv {{ demo_tmp.stdout }} /root/demo-project"
  when: demo_project_done.stat.exists != True

- stat:
    path: /root/demo-project-distgit
  register: demo_project_distgit_done

- block:
    - name: Create a temporary clone directory
      command: mktemp -d
      register: demo_distgit_tmp

    - name: Clone the demo-project-distgit repository
      git:
        repo: git+ssh://gerrit/demo-project-distgit
        dest: "{{ demo_distgit_tmp.stdout }}"

    - name: Copy demo project files
      copy:
        src: "demo/project-distgit/{{ item }}"
        dest: "{{ demo_distgit_tmp.stdout }}/{{ item }}"
      loop:
        - .zuul.yaml
        - demo-project.spec
        - build-rpm.yaml

    - name: Push demo project distgit repo
      command: "git {{ item }}"
      args:
        chdir: "{{ demo_distgit_tmp.stdout }}"
      loop:
        - "add -A"
        - "commit -m 'Initialize demo-project-distgit repository'"
        - "push git+ssh://gerrit/demo-project-distgit master"

    - name: Save zuul jobs repo
      command: "mv {{ demo_distgit_tmp.stdout }} /root/demo-project-distgit"
  when: demo_project_distgit_done.stat.exists != True
