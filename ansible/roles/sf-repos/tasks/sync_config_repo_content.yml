---
# Mandatory config repo directories
- include_tasks: sync_config_repo_dir.yml
  vars:
    repo_dir_names:
      - playbooks
      - policies
      - resources
      - zuul

# Optional config repo directories
- include_tasks: sync_config_repo_dir.yml
  vars:
    repo_dir_names: [dashboards, gerrit]
  when: "'gerrit' in roles"

- include_tasks: sync_config_repo_dir.yml
  vars:
    repo_dir_names: [gerritbot]
  when: "'gerritbot' in roles"

- include_tasks: sync_config_repo_dir.yml
  vars:
    repo_dir_names: [nodepool]
  when: "'nodepool' in roles"

- include_tasks: sync_config_repo_dir.yml
  vars:
    repo_dir_names: [repoxplorer]
  when: "'repoxplorer' in roles"

- include_tasks: sync_config_repo_dir.yml
  vars:
    repo_dir_names: [mirrors]
  when: "'mirrors' in roles"

- include_tasks: sync_config_repo_dir.yml
  vars:
    repo_dir_names: [metrics]
  when: "'grafana' in roles"

- include_tasks: sync_config_repo_dir.yml
  vars:
    repo_dir_names: [dlrn]
  when: "'dlrn' in roles"

# Apply mandatory templates
- name: Update config templates
  template:
    src: "config/{{ item }}.j2"
    dest: "{{ config_clone_dir }}/{{ item }}"
  with_items:
    - resources/_internal.yaml
    - playbooks/base/pre.yaml
    - playbooks/base/post.yaml
    - playbooks/config/update.yaml
    - zuul.d/_jobs-base.yaml
    - zuul.d/_jobs-pages.yaml
    - zuul.d/_pipelines.yaml
    - zuul/_main.yaml
    - nodepool/_local_hypervisor_oci.yaml

# Manage config repo secrets
- name: Delete config_key_checksum if update fqdn
  file:
    path: /var/lib/software-factory/state/config_key_checksum
    state: absent
  when: update_fqdn

- name: Verify if config repository key changed
  block:
    - name: Check config repository key
      stat:
        path: /var/lib/software-factory/bootstrap-data/certs/config.pub
      register: _config_repo_key

    - name: Ensure config_key_checksum exists
      file:
        path: /var/lib/software-factory/state/config_key_checksum
        state: touch

    - name: Read last config_key_checksum
      command: cat /var/lib/software-factory/state/config_key_checksum
      changed_when: false
      register: _localconfig

    - name: Set config_key_regenerated fact
      set_fact:
        new_config_key: "{{ config_key_exists and _localconfig.stdout != _config_repo_key.stat.checksum|default(None) }}"

- block:
    - name: "Generate sflogs ssh_private_key secret"
      command: >
        /usr/share/sf-config/scripts/zuul-encrypt-secret.py \
            /var/lib/software-factory/bootstrap-data/certs/config.pub ssh_private_key \
            --infile /var/lib/software-factory/bootstrap-data/ssh_keys/zuul_logserver_rsa
      register: _sflogs_private_key_secret

    - name: Update secret_sflogs.yaml
      template:
        src: "config/zuul.d/_secret_sflogs.yaml.j2"
        dest: "{{ config_clone_dir }}/zuul.d/_secret_sflogs.yaml"
  when:
    - new_config_key
    - config_key_exists

- name: install server secret
  block:
    - name: "Generate install_server ssh_private_key secret"
      command: >
        /usr/share/sf-config/scripts/zuul-encrypt-secret.py \
            /var/lib/software-factory/bootstrap-data/certs/config.pub ssh_private_key \
            --infile /var/lib/software-factory/bootstrap-data/ssh_keys/zuul_worker_rsa
      register: _install_server_private_key_secret

    - name: Update secret_install_server.yaml
      template:
        src: "config/zuul.d/_secret_install_server.yaml.j2"
        dest: "{{ config_clone_dir }}/zuul.d/_secret_install_server.yaml"
  when:
    - new_config_key
    - config_key_exists

- name: install tenant update secret
  block:
    - name: Scan master_sf known hosts
      command: "ssh-keyscan -t rsa {{ master_sf_fqdn }}"
      register: _master_sf_known_hosts

    - name: Update secret_tenant_update.yaml
      template:
        src: "config/zuul.d/_secret_tenant_update.yaml.j2"
        dest: "{{ config_clone_dir }}/zuul.d/_secret_tenant_update.yaml"
  when:
    - tenant_deployment
    - new_config_key
    - config_key_exists

- block:
    - name: Generate sfpages ssh_private_key secret
      command: >
        /usr/share/sf-config/scripts/zuul-encrypt-secret.py \
            /var/lib/software-factory/bootstrap-data/certs/config.pub ssh_private_key \
            --infile /var/lib/software-factory/bootstrap-data/ssh_keys/zuul_gatewayserver_rsa
      register: _sfpages_private_key_secret

    - name: Update secret_sfpages.yaml
      template:
        src: "config/zuul.d/_secret_sfpages.yaml.j2"
        dest: "{{ config_clone_dir }}/zuul.d/_secret_sfpages.yaml"
  when:
    - new_config_key
    - config_key_exists

- name: Update admin email in resources.yaml
  lineinfile:
    path: '{{ config_clone_dir }}/resources/resources.yaml'
    regexp: '        - admin@.*'
    line: '        - admin@{{ fqdn }}'
  when: update_fqdn

- block:
    - name: Create temporary service user secret file
      tempfile:
        state: file
      register: temp_secret_file

    - name: Add service user password to temprary file
      copy:
        content: "{{ sf_service_user_password }}"
        dest: "{{ temp_secret_file.path }}"
      no_log: true

    - name: Generate service_user secret
      command: >
        /usr/share/sf-config/scripts/zuul-encrypt-secret.py \
            /var/lib/software-factory/bootstrap-data/certs/config.pub password \
            --infile {{ temp_secret_file.path }}
      register: _service_user_secret

    - name: Remove temprary service user secret file
      file:
        path: "{{ temp_secret_file.path }}"
        state: absent

    - name: Update service_user.yaml
      template:
        src: "config/zuul.d/_secret_service_user.yaml.j2"
        dest: "{{ config_clone_dir }}/zuul.d/_secret_service_user.yaml"
  when:
    - new_config_key
    - config_key_exists

- name: Save config key checksum
  copy:
    content: "{{ _config_repo_key.stat.checksum|default(None) }}"
    dest: /var/lib/software-factory/state/config_key_checksum
  when: config_key_exists
