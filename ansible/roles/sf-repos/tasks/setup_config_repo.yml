---
- stat:
    path: /root/config
  register: config_done

- name: Create empty resources file
  copy:
    content: 'resources: {}'
    dest: /var/lib/software-factory/bootstrap-data/empty_resources.yaml

- block:
    - name: Make a first admin connexion through SF SSO (force sf_users admin id:1)
      command: sfmanager sf_user list

    - set_fact:
        initial_creation: True

    - name: Prepare initial resources
      template:
        src: config/resources/_internal.yaml.j2
        dest: "/var/lib/software-factory/bootstrap-data/resources.yaml"

    - set_fact:
        initial_creation: False

    # Ignoring errors to simplify retry, if direct_apply really failed, then below git clone won't work
    - name: Create initial resources
      command: >
        /usr/local/bin/resources.sh direct_apply
            /var/lib/software-factory/bootstrap-data/empty_resources.yaml
            /var/lib/software-factory/bootstrap-data/resources.yaml
      ignore_errors: yes
      when:
        - not remote_config_repositories
        - "'gerrit' in roles"

    - include_tasks: create_local_repo.yml repo_name=config
      when:
        - not remote_config_repositories
        - "'gerrit' not in roles"

    - command: mktemp -d
      register: conf_tmp

    # Ignore errors and manual check for missing master branch because it's
    # not fatal
    - name: Clone the config repository
      git:
        repo: "{{ config_location }}"
        dest: "{{conf_tmp.stdout}}"
      ignore_errors: true
      register: _git_output

    - name: Check if master branch was missing
      fail: msg="{{ _git_output.msg }}"
      when:
        - _git_output is failed
        - "'Failed to checkout branch master' not in _git_output.msg"

    # Prepare the config repo
    - name: Copy the default config repo files
      command: rsync -av /usr/share/sf-config/ansible/roles/sf-repos/files/config/ {{ conf_tmp.stdout }}/

    - name: Initialize default config groups
      template:
        src: config/resources/resources.yaml.j2
        dest: "{{ conf_tmp.stdout }}/resources/resources.yaml"

    - set_fact:
        config_clone_dir: "{{ conf_tmp.stdout }}"

    - include_tasks: sync_config_repo_content.yml

    # Commit
    - name: Push config repo
      command: "git {{ item }}"
      args:
        chdir: "{{ conf_tmp.stdout }}"
      with_items:
        - "add -A"
        - "commit -m 'Initialize config repository'"
        - "push {{ config_location }} master"

    - command: mv {{ conf_tmp.stdout }} /root/config
  when: config_done.stat.exists != True

- include_tasks: gitreview_update_fqdn.yaml update_fqdn_project='{{ config_done.stat.path }}'
  when: update_fqdn
