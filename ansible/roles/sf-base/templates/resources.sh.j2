#!/bin/bash

set -e

ENDPOINT="{{ managesf_internal_url }}/resources/"

APPLIED_OUTPUT="applied-output"
VALIDATED_OUTPUT="validated-output"

trap "rm -f $VALIDATED_OUTPUT && rm -f $APPLIED_OUTPUT" EXIT

[ -z "$1" ] && {
    echo "Valid arguments are validate, apply, direct_apply, get, get_missing_resources. Exit."
    exit 1
}

[ "$1" == "direct_apply" ] && {
    [ ! -f "$2" -a ! -f "$3" ] && {
        echo "direct_apply action needs two yaml files as second and third args"
        echo "$(basename $0) direct_apply prev.yaml new.yaml"
        exit 1
    } || {
        rm -f direct_apply.json
        python <<SCRIPT
import json
data = {}
data['prev'] = file("$2").read()
data['new'] = file("$3").read()
json.dump(data, file('direct_apply.json', 'w'))
SCRIPT
    }
}

case $1 in
    validate)
        # Check tips of the HEAD is change on resources/
        HEAD_SHA=$(git --no-pager log --no-merges --format='%H' -n 1 HEAD)
        HEAD_RESOURCES_SHA=$(git --no-pager log --no-merges --format='%H' -n 1 HEAD -- resources)
        if [ "$HEAD_SHA" != "$HEAD_RESOURCES_SHA" ]; then
            echo
            echo "Nothing to validate on the resources."
            exit 0
        fi
	# Here we expect to get ZUUL_URL and ZUUL_REF set by Zuul
	# Managesf will by itself fetch the data in the git repo using both.
	# This way will become legacy will ZuulV3 where the no merger exists
	# anymore.
        if [ -n "$ZUUL_URL" -a -n "$ZUUL_REF" ]; then
            http_code=$(curl -s -w "%{http_code}" -H "X-Remote-User: SF_SERVICE_USER" \
             -H "Content-Type: application/json" \
             -d '{"zuul_url": "'$ZUUL_URL'/config", "zuul_ref": "'$ZUUL_REF'"}' \
             -X POST $ENDPOINT -o $VALIDATED_OUTPUT)
	# New workflow is to read resources/*.yaml and build a dict with the raw
	# content and send it via a JSON POST to managesf.
        else
            python <<SCRIPT
import os
import yaml
import json

data = dict([(os.path.join('resources', f), file(os.path.join('resources', f)).read())
	     for f in os.listdir('resources') if f.endswith('.yaml') or f.endswith('.yml')])
json.dump({'data': data}, file('data.json', 'w'))
SCRIPT
            http_code=$(curl -s -w "%{http_code}" -H "X-Remote-User: SF_SERVICE_USER" \
             -H "Content-Type: application/json" \
             -d @data.json -X POST $ENDPOINT -o $VALIDATED_OUTPUT)
            rm -f data.json
        fi
        cat $VALIDATED_OUTPUT | python -m json.tool
        [ "$http_code" != "200" ] && {
            echo "Resource modifications validation failed (API return code: $http_code)."
            exit 1
        }
        git log -1 --no-merges
        if git log -1 --no-merges | grep "sf-resources: allow-delete" > /dev/null; then
            delete_authorized="true"
        else
            delete_authorized="false"
        fi
        if cat $VALIDATED_OUTPUT | grep "is going to be deleted" > /dev/null; then
            if [ "$delete_authorized" == "false" ]; then
                echo
                echo "Resources deletion(s) have been detected."
                echo "The commit msg tag: 'sf-resources: allow-delete' has not been detected."
                echo "The change won't be validated until you include the tag 'sf-resources: allow-delete'"
                echo "in the commit message."
                exit 1
            fi
        fi
        if git log -1 --no-merges | grep "sf-resources: skip-apply" > /dev/null; then
            echo
            echo "The commit msg tag: 'sf-resources: skip-apply' has been detected."
            echo "The approval of this patch won't trigger the creation of the resources above."
            echo "The purpose of this commit is usually to re-sync config/resources with the reality."
        fi
        exit 0
        ;;
    apply)
        if [ -z "$ZUUL_COMMIT" ]; then
            echo "ZUUL_COMMIT is empty. Skip processing."
            exit 0
        fi
        clone=$(mktemp -d)
        git clone http://gerrit/r/config $clone
        # Be sure to use the right ref (ZUUL_COMMIT references the commit
        # for which the config-update job is running)
        cd $clone
        git checkout $ZUUL_COMMIT
        # Check tips of the HEAD is change on resources/
        HEAD_SHA=$(git --no-pager log --no-merges --format='%H' -n 1 HEAD)
        HEAD_RESOURCES_SHA=$(git --no-pager log --no-merges --format='%H' -n 1 HEAD -- resources)
        if [ "$HEAD_SHA" != "$HEAD_RESOURCES_SHA" ]; then
            echo
            echo "Nothing to apply on the resources."
            rm -R $clone
            exit 0
        fi
        if git log -1 --no-merges | grep "sf-resources: skip-apply" > /dev/null; then
            echo
            echo "The commit msg tag: 'sf-resources: skip-apply' has been detected."
            echo "Skip resources apply."
            rm -R $clone
            exit 0
        fi
        cd -
        rm -R $clone
        http_code=$(curl -s -w "%{http_code}" -H "X-Remote-User: SF_SERVICE_USER" \
         -H 'Content-Type: application/json' -d '{"COMMIT": "'$ZUUL_COMMIT'"}' \
         -X PUT $ENDPOINT -o $APPLIED_OUTPUT)
        cat $APPLIED_OUTPUT | python -m json.tool
        [ "$http_code" != "201" ] && {
            echo "Resource modifications apply failed (API return code: $http_code)."
            exit 1
        }
        exit 0
        ;;
    direct_apply)
        http_code=$(curl -s -w "%{http_code}" -H "X-Remote-User: SF_SERVICE_USER" \
         -H "Content-Type: application/json" \
         --data @direct_apply.json \
         -X PUT $ENDPOINT -o $APPLIED_OUTPUT)
        cat $APPLIED_OUTPUT | python -m json.tool
        [ "$http_code" != "201" ] && {
            echo "Resource modifications direct_apply failed (API return code: $http_code)."
            exit 1
        }
        exit 0
        ;;
    get)
        curl -s -H "X-Remote-User: SF_SERVICE_USER" $ENDPOINT | python -m json.tool
        ;;
    get_missing_resources)
        curl -s -H "X-Remote-User: SF_SERVICE_USER" "$ENDPOINT?get_missing_resources=true" -o missing_resources.json
        python <<SCRIPT
import json
import yaml

# Be sure multiline are pretty represented
def str_presenter(dumper, data):
  if len(data.splitlines()) > 1:  # check for multiline string
    return dumper.represent_scalar('tag:yaml.org,2002:str', data, style='|')
  return dumper.represent_scalar('tag:yaml.org,2002:str', data)

yaml.add_representer(unicode, str_presenter)
yaml.add_representer(str, str_presenter)
data = json.load(file('missing_resources.json'))
s = yaml.dump(data[1], default_flow_style=False)
file('missing_resources.yaml', 'w').write(s)
if data[0]:
    print "It appears some issues occured during data fetching:"
for log in data[0]:
    print log
    print "---"
print "YAML file to submit as a review to the config repo is : missing_resources.yaml"
SCRIPT
        [ "$2" == "submit" ] && {
            clone=$(mktemp -d)
            msg=$(mktemp)
            git clone git+ssh://gerrit/config $clone
            cp missing_resources.yaml $clone/resources/missing_resources_$(date +%s).yaml
            cat > $msg << EOF
Propose missing resources to the config repo

This change should be approved as it is then
once merged fell free to re-organize as you want.

sf-resources: skip-apply
EOF
            (
                cd $clone
                git add -A
                git commit -F $msg
                git review
            )
            rm -R $clone
            rm $msg
        } || {
            echo "You can automatically propose the file as review by running:"
            echo "$(basename $0) get_missing_resources submit"
        }
        ;;
    *)
        echo "Action not supported."
        ;;
esac
