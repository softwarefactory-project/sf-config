---
- name: Set yum.conf retries
  lineinfile:
    dest: /etc/yum.conf
    regexp: "^retries="
    line: "retries=30"

- name: Check if epel-release is installed
  command: rpm -q epel-release
  ignore_errors: yes
  changed_when: false
  register: epel_installed
  failed_when: epel_installed.rc == 0

- name: "Fix yum contentdir vars"
  copy:
    content: "centos"
    dest: /etc/yum/vars/contentdir

- name: Report error if epel-release is installed
  fail:
    msg: "Software Factory is not compatible with EPEL."
  when: epel_installed.rc == 0

- name: Check for sf-release
  stat:
    path: /etc/yum.repos.d/sf-release.repo
  register: sf_release_installed

- name: Install sf-release if needed
  yum:
    name: "{{ sf_release_url }}"
    state: present
  when: not sf_release_installed.stat.exists

- name: Add openstack repo package
  yum:
    name: '{{ rdo_release_url }}'
    state: present
    disablerepo: '{{ yum_disable_repo|default(omit) }}'
    enablerepo: '{{ yum_enable_repo|default(omit) }}'
  register: rdo_repo

- name: Add scl repo package
  yum:
    name: centos-release-scl-rh
    state: present
    disablerepo: '{{ yum_disable_repo|default(omit) }}'
    enablerepo: '{{ yum_enable_repo|default(omit) }}'
  when: ansible_distribution == "CentOS"

- name: Update all packages
  yum:
    name: '*'
    state: latest
    disablerepo: '{{ yum_disable_repo|default(omit) }}'
    enablerepo: '{{ yum_enable_repo|default(omit) }}'
  when: rdo_repo is changed

- name: Install useful packages
  yum:
    name:
      - haveged
      - logrotate
      - git
      - monit
      - ntp
      - patch
      - postfix
      - rsyslog
      - tmux
      - vim-enhanced
      - sf-config
      # Needed by ansible selinux module
      - libsemanage-python
      - policycoreutils-python
      # Needed for wait4 scripts
      - nmap-ncat
      # Needed by sfconfig ansible setup tasks
      - rh-python35-python-requests
      # Needed by very minimal instance
      - rsync
      - traceroute
      - sudo
      - openssh-server
      - sudo
      - crontabs
    state: present
    disablerepo: '{{ yum_disable_repo|default(omit) }}'
    enablerepo: '{{ yum_enable_repo|default(omit) }}'

- name: Check for selinux config
  stat:
    path: /etc/selinux/config
  register: _selinux_config

- name: Set permissive selinux
  lineinfile:
    dest: /etc/selinux/config
    regexp: '^SELINUX='
    line: 'SELINUX=permissive'
  when:
    - _selinux_config.stat.exists
    - ansible_virtualization_type != "podman"

- name: Remove selinux autorelabel
  file:
    path: /.autorelabel
    state: absent

- name: Check for python3 scl
  stat:
    path: /opt/rh/rh-python35/root/usr/bin/python3.5
  register: _python35_installed

- name: Create symlink libpython3.5
  file:
    src: "/opt/rh/rh-python35/root/{{ item }}"
    dest: "/usr/{{ item }}"
    state: link
    force: yes
  when: _python35_installed.stat.exists
  with_items:
    - "lib64/libpython3.so.rh-python35"
    - "lib64/libpython3.5m.so.rh-python35-1.0"
    - "lib64/python3.5"
    - "lib/python3.5"
    - "bin/python3"

- name: Symlink scl ansible
  file:
    src: "/opt/rh/rh-python35/root/usr/bin/{{ item }}"
    dest: "/usr/bin/{{ item }}"
    state: link
    force: yes
  with_items:
    - ansible-playbook
    - ansible-inventory
    - ansible-pull
    - ansible-vault
    - ansible-galaxy
    - ansible

- name: Create libexec directory
  file:
    path: /usr/libexec/software-factory
    owner: root
    group: root
    mode: 0755
    state: directory

- name: Install libexec scripts
  copy:
    src: "{{ item }}"
    dest: "/usr/libexec/software-factory/{{ item }}"
    mode: 0555
  with_items:
    - wait4port
    - wait4mariadb
    - wait4gerrit
    - smart-restart.py
