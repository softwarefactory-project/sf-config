---
- name: Check container image version
  include_role:
    name: sf-container
    tasks_from: check_version.yaml
  loop: "{{ opensearch_dashboards_components }}"

- name: Create cert dir
  file:
    path: "{{ opensearch_dashboards_certs_dir }}"
    owner: "{{ owner }}"
    group: "{{ group }}"
    state: directory

- name: Copy certs
  copy:
    src: "{{ sf_cert_path }}/{{ item }}"
    dest: "{{ opensearch_dashboards_certs_dir }}/{{ item }}"
    mode: "0644"
    owner: "{{ owner }}"
    group: "{{ group }}"
  loop:
    - opensearch-dashboards.crt
    - opensearch-dashboards.key

- name: Copy ca-trust
  copy:
    src: /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem
    dest: "{{ opensearch_dashboards_certs_dir }}/localCA.pem"
    mode: "0644"
    owner: "{{ owner }}"
    group: "{{ group }}"

- name: Generate Opensearch dashboards welcome page text - internal host
  set_fact:
    opensearch_dashboards_login_screen: "Readonly user: {{ opensearch_readonly_user }} password: {{ opensearch_readonly_password }}"

- name: Generate Opensearch dashboards welcome page text - external host
  set_fact:
    opensearch_dashboards_login_screen: "Readonly user: {{ external_opensearch_readonly_username }} password: {{ external_opensearch_readonly_password }}"
  when: external_opensearch_readonly_username != '' and external_opensearch_readonly_password != ''

- name: Configure Opensearch Dashboards
  template:
    src: opensearch-dashboards.yml.j2
    dest: /etc/opensearch/opensearch_dashboards.yml
    owner: "{{ owner }}"
    group: "{{ group }}"
  notify:
    - restart opensearch dashboards
    - ensure started opensearch dashboards

- name: Get opensearch-dashboards uid
  command: id -u opensearch-dashboards
  register: _opensearch_dashboards_id

- name: Expose opensearch-dashboards uid
  set_fact:
    opensearch_dashboards_uid: "{{ _opensearch_dashboards_id.stdout }}"

- name: Create container - Opensearch dashboards
  include_role:
    name: sf-container
    tasks_from: setup.yaml
  loop: "{{ opensearch_dashboards_components }}"

- name: Send backup and restore script
  copy:
    src: kibana-backup.py
    dest: /usr/local/bin/kibana-backup.py
    mode: '0755'

# NOTE(dpawlik) Remove that when sf-config will have a feature, that
# restore backup will be done after starting the service.
- name: Restore Opensearch Dashboards objects that was available before moving to Opendistro
  block:
    - name: Set backup src var
      set_fact:
        backup_src: "/var/lib/software-factory/backup/opensearch_dashboards"

    - name: Check if Opensearch Dashboards service is alive
      wait_for:
        host: "{{ opensearch_dashboards_host }}"
        port: 5601
        timeout: 300
        delay: 20

    - name: Check it there is a backup.ndjson file
      stat:
        path: "{{ backup_src }}/backup.ndjson"
      register: kibana_backup_file

    - name: Restore backup, when file exists
      block:
        - name: Restore objects from backup
          command: |
            /usr/local/bin/kibana-backup.py --kibana-url "{{ opensearch_dashboards_internal_url }}" --restore-file {{ backup_src }}/backup.ndjson restore
        - name: Rename backup.ndjson to other name
          command: |
            mv {{ backup_src }}/backup.ndjson {{ backup_src }}/backup.ndjson-restored
      when: kibana_backup_file.stat.exists

  when: sf_previous_version < 3.6
