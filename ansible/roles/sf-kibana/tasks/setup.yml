---
- include_tasks: "{{ sf_tasks_dir }}/check_version.yml"
- include_tasks: "{{ sf_tasks_dir }}/create_user.yml"
  vars:
    user_name: kibana

- name: Configure kibana
  lineinfile:
    dest: /etc/kibana/kibana.yml
    regexp: '^#?{{ item.regexp }}.*'
    line: '{{ item.line }}'
  loop:
    - regexp: 'server.host'
      line: 'server.host: {{ kibana_host }}'
    - regexp: 'server.basePath'
      line: 'server.basePath: "/analytics"'
    - regexp: 'elasticsearch.hosts'
      line: 'elasticsearch.hosts: ["{{ elasticsearch_internal_url }}"]'
    - regexp: 'telemetry.enabled'
      line: 'telemetry.enabled: false'
  register: kibanaconf

- name: Restart kibana after the configuration changed
  systemd:
    name: kibana
    state: restarted
    daemon_reload: yes
  when: kibanaconf is changed or update_fqdn

- name: Kibana service started and enabled
  systemd:
    name: kibana
    state: started
    enabled: "yes"
    daemon_reload: yes

- name: Send backup and restore script
  copy:
    src: kibana-backup.py
    dest: /usr/local/bin/kibana-backup.py
    mode: '0755'


# NOTE(dpawlik) Remove that when sf-config will have a feature, that
# restore backup will be done after starting the service.
- name: Set backup src var
  set_fact:
    backup_src: "/var/lib/software-factory/kibana"

- name: Check it there is a backup.ndjson file
  stat:
    path: "{{ backup_src }}/backup.ndjson"
  register: kibana_backup_file

- name: Restore backup, when file exists
  block:
    - name: Restore objects from backup
      command: |
        /usr/local/bin/kibana-backup.py --kibana-url "{{ kibana_internal_url }}" --restore-file {{ backup_src }}/backup.ndjson restore
    - name: Rename backup.ndjson to other name
      command: |
        mv {{ backup_src }}/backup.ndjson {{ backup_src }}/backup.ndjson-restored
  when: kibana_backup_file.stat.exists
